package web

import "strings"

/********************************************************************/
/*********************** General Templ ******************************/
/********************************************************************/

templ Base() {
	<!DOCTYPE html>
	<html lang="en" class="h-screen">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width,initial-scale=1"/>
			<!-- Fav Icon -->
			<link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon_io/apple-touch-icon.png"/>
			<link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon_io/favicon-32x32.png"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon_io/favicon-16x16.png"/>
			<link rel="manifest" href="/assets/favicon_io/site.webmanifest"/>
			<title>Go Blueprint Hello</title>
			<link href="/assets/css/output.css" rel="stylesheet"/>
			<script src="/assets/js/htmx.min.js"></script>
			<script src="/assets/js/echarts.min.js"></script>
		</head>
		<body class="bg-gray-100">
			{ children... }
		</body>
	</html>
}

templ HomeWebPage(defaultRouteVersion string) {
	@Base() {
		<div
			class="font-sans bg-gray-100 min-h-screen m-0 p-0 text-center
                    text-sm sm:text-base md:text-lg lg:text-xl xl:text-2xl"
		>
			<header class="bg-yellow-500 text-white py-5 px-10">
				<h1 class="font-bold">Welcome to BATELEC I</h1>
				<p class="mt-2">Power Utility Company in Batangas</p>
			</header>
			<main class="mx-5 my-8">
				<p class="mb-6">Your trusted partner in energy solutions.</p>
				<div class="space-x-4">
					<!-- Add query parameter for consumer -->
					<a href={ templ.URL("/" + defaultRouteVersion + "/consumer/login?user_type=consumer") } class="button bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded w-40 inline-block">
						Login as Consumer
					</a>
					<!-- Add query parameter for employee -->
					<a href={ templ.URL("/" + defaultRouteVersion + "/employee/login?user_type=employee") } class="button bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded w-40 inline-block">
						Login as Employee
					</a>
				</div>
			</main>
		</div>
	}
}

templ LoginWebPage(defaultRouteVersion, clientType string) {
	@Base() {
		<div class="min-h-screen bg-gradient-to-br from-yellow-100 to-yellow-200 flex items-center justify-center">
			<div class="max-w-md w-full space-y-8">
				<div class="text-center">
					<h1 class="text-4xl font-extrabold text-gray-800 tracking-tight">
						{ strings.ToUpper(clientType) } LOGIN
					</h1>
				</div>
				<div class="bg-white bg-opacity-90 rounded-2xl shadow-2xl p-8 space-y-6 border border-green-100">
					<form
						hx-post={ "/" + defaultRouteVersion + "/" + clientType + "/login" }
						hx-target="#error-message"
						hx-swap="innerHTML"
						class="space-y-6"
					>
						<div class="space-y-2">
							<label for="email" class="block text-sm font-medium text-gray-700">
								Email Address
							</label>
							<input
								type="email"
								id="email"
								name="email"
								required
								class="block w-full px-4 py-3 border border-gray-300 
                                          rounded-lg focus:ring-2 focus:ring-green-500 
                                          focus:border-transparent placeholder-gray-400 
                                          transition-all duration-200"
							/>
						</div>
						<div class="space-y-2">
							<label for="password" class="block text-sm font-medium text-gray-700">
								Password
							</label>
							<div class="relative">
								<input
									type="password"
									id="password"
									name="password"
									required
									class="block w-full px-4 py-3 border border-gray-300 
                                              rounded-lg focus:ring-2 focus:ring-green-500 
                                              focus:border-transparent placeholder-gray-400 
                                              transition-all duration-200"
								/>
								<button
									type="button"
									class="absolute inset-y-0 right-0 px-4 text-sm 
                                               text-green-600 hover:text-green-700 
                                               flex items-center"
								>
									Show
								</button>
							</div>
						</div>
						<div class="flex items-center justify-between">
							<div class="flex items-center">
								<input
									id="remember-me"
									name="remember-me"
									type="checkbox"
									class="h-4 w-4 text-green-600 focus:ring-green-500 
                                              border-gray-300 rounded"
								/>
								<label for="remember-me" class="ml-2 block text-sm text-gray-700">
									Remember me
								</label>
							</div>
							<a
								href="#"
								class="text-sm font-medium text-green-600 hover:text-green-700 
                                      hover:underline"
							>
								Forgot your password?
							</a>
						</div>
						<button
							type="submit"
							class="w-full bg-gradient-to-r from-green-600 to-green-700 
                                       hover:from-green-700 hover:to-green-800 text-white 
                                       font-bold py-3 px-4 rounded-lg shadow-md hover:shadow-lg 
                                       transition-all duration-200 ease-in-out transform 
                                       hover:-translate-y-0.5 focus:outline-none 
                                       focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
						>
							Login
						</button>
					</form>
					<div class="flex items-center justify-center space-x-2">
						<span class="h-px bg-gray-300 flex-grow"></span>
						<span class="text-gray-600 text-sm">or</span>
						<span class="h-px bg-gray-300 flex-grow"></span>
					</div>
					<div class="text-center">
						<a
							href="/register"
							class="text-green-600 hover:text-green-700 font-medium 
                                  underline transition-colors duration-200"
						>
							Create a new account
						</a>
					</div>
					<div id="error-message" class="text-red-600 text-sm text-center mt-3 flex items-center justify-center space-x-2">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
						</svg>
						<span></span>
					</div>
				</div>
			</div>
		</div>
	}
}

templ NotFound() {
	@Base() {
		<main class="grid min-h-full place-items-center bg-white px-6 py-24 sm:py-32 lg:px-8">
			<div class="text-center">
				<p class="text-base font-semibold text-indigo-600">404</p>
				<h1 class="mt-4 text-5xl font-semibold tracking-tight text-balance text-gray-900 sm:text-7xl">Page not found</h1>
				<p class="mt-6 text-lg font-medium text-pretty text-gray-500 sm:text-xl/8">Sorry, we couldn’t find the page you’re looking for.</p>
				<div class="mt-10 flex items-center justify-center gap-x-6">
					<a href="#" class="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-xs hover:bg-indigo-500 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Go back home</a>
					<a href="#" class="text-sm font-semibold text-gray-900">Contact support <span aria-hidden="true">&rarr;</span></a>
				</div>
			</div>
		</main>
	}
}

/********************************************************************/
/********************************************************************/
/********************************************************************/

/********************************************************************/
/*********************** Consumer Templ *****************************/
/********************************************************************/

templ ConsumerDashboardWebPage() {
	@Base() {
		<div
			class="bg-yellow-500 px-4 py-3 flex justify-between items-center relative
                    text-sm sm:text-base md:text-lg lg:text-xl xl:text-2xl"
		>
			<div class="text-white font-semibold">BATELEC I</div>
			<div class="hidden md:flex space-x-4">
				<a href="#" class="text-white hover:underline">Home</a>
				<a href="#" class="text-white hover:underline">Profile</a>
				<a href="#" class="text-white hover:underline">Billing</a>
				<a href="#" class="text-white hover:underline">Support</a>
				<a href="#" class="text-white hover:underline">Logout</a>
			</div>
			<button id="mobile-menu-button" class="md:hidden text-green-600 focus:outline-none">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
				</svg>
			</button>
			<div id="mobile-menu" class="md:hidden hidden absolute top-full left-0 w-full bg-yellow-500 p-4 space-y-4">
				<a href="#" class="block text-white hover:underline">Home</a>
				<a href="#" class="block text-white hover:underline">Profile</a>
				<a href="#" class="block text-white hover:underline">Billing</a>
				<a href="#" class="block text-white hover:underline">Support</a>
				<a href="#" class="block text-white hover:underline">Logout</a>
			</div>
		</div>
		<script>
            document.getElementById('mobile-menu-button').addEventListener('click', function() {
                document.getElementById('mobile-menu').classList.toggle('hidden');
            });
        </script>
	}
}

/********************************************************************/
/********************************************************************/
/********************************************************************/

/********************************************************************/
/*********************** Consumer Templ *****************************/
/********************************************************************/

// System Admin Base
templ SystemAdminEmployeeBaseWebPage() {
	@Base() {
		<div>
			<!-- Navbar -->
			<div
				class="bg-yellow-500 px-4 py-3 flex justify-between items-center relative
                        text-sm sm:text-base md:text-lg lg:text-xl xl:text-2xl"
			>
				<div class="text-white font-semibold">BATELEC I</div>
				<!-- Desktop Menu -->
				<div class="hidden md:flex space-x-4">
					<a href="dashboard" class="block text-white hover:underline">Dashboard</a>
					<a href="consumer" class="block text-white hover:underline">Consumer</a>
					<a href="accounts" class="block text-white hover:underline">Accounts</a>
					<a href="accounting" class="block text-white hover:underline">Accounting</a>
					<a href="payment" class="block text-white hover:underline">Payment</a>
					<button
						onclick="showLogoutModal()"
						class="block text-white hover:underline focus:outline-none"
					>
						Logout
					</button>
				</div>
				<!-- Mobile Menu Button -->
				<button id="mobile-menu-button" class="md:hidden text-green-600 focus:outline-none">
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
					</svg>
				</button>
				<!-- Mobile Menu -->
				<div id="mobile-menu" class="md:hidden hidden absolute top-full left-0 w-full bg-yellow-500 p-4 space-y-4">
					<a href="dashboard" class="block text-white hover:underline">Dashboard</a>
					<a href="consumer" class="block text-white hover:underline">Consumer</a>
					<a href="accounts" class="block text-white hover:underline">Accounts</a>
					<a href="accounting" class="block text-white hover:underline">Accounting</a>
					<button
						onclick="showLogoutModal()"
						class="block w-full text-left text-white hover:underline focus:outline-none"
					>
						Logout
					</button>
				</div>
			</div>
			<!-- Confirmation Modal -->
			<div id="logout-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
				<div class="bg-white rounded-lg p-6 space-y-4 max-w-md">
					<h3 class="text-lg font-semibold text-gray-800">Confirm Logout</h3>
					<p class="text-gray-600">Are you sure you want to log out?</p>
					<div class="flex justify-end space-x-3">
						<button
							onclick="hideLogoutModal()"
							class="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 transition"
						>
							Cancel
						</button>
						<button
							hx-get="/v1/employee/sysadmin/logout"
							class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
						>
							Yes, Logout
						</button>
					</div>
				</div>
			</div>
			<!-- Content Container -->
			<div class="p-0">
				{ children... }
			</div>
			<!-- Scripts -->
			<script>
                // Mobile menu toggle
                document.getElementById('mobile-menu-button').addEventListener('click', function() {
                    document.getElementById('mobile-menu').classList.toggle('hidden');
                });

                // Logout modal functions
                function showLogoutModal() {
                    document.getElementById('logout-modal').classList.remove('hidden');
                }

                function hideLogoutModal() {
                    document.getElementById('logout-modal').classList.add('hidden');
                }
            </script>
		</div>
	}
}

//<---------------- Dashboard Section ---------------->//
templ SystemAdminEmployeeDashboardWebPage() {
	@SystemAdminEmployeeBaseWebPage() {
		<!DOCTYPE html>
		<html lang="en">
			<head>
				<meta charset="UTF-8"/>
				<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
				<title>EcoPower - Smart Meter Dashboard</title>
				<script src="https://cdn.tailwindcss.com"></script>
				<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
				<script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
				<style>
        .stat-card {
            transition: all 0.3s ease;
            border-left: 4px solid;
        }
        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .filter-btn {
            transition: all 0.2s ease;
        }
        .filter-btn.active {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        #map {
            transition: all 0.3s ease;
        }
        .leaflet-popup-content {
            min-width: 200px;
        }
    </style>
			</head>
			<body class="bg-primary-50 min-h-screen">
				<div class="max-w-7xl mx-auto p-4 sm:p-6">
					<!-- Header -->
					<header class="mb-8">
						<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
							<div>
								<h1 class="text-3xl font-bold text-primary-900 flex items-center gap-2">
									<i class="fas fa-map-marked-alt"></i>
									Smart Meter Map
								</h1>
								<p class="text-primary-700">Monitor and manage all smart meters in real-time</p>
							</div>
						</div>
					</header>
					<!-- Statistics Cards -->
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5 mb-8">
						<div class="stat-card bg-white rounded-xl p-5 shadow-sm border-l-blue-500">
							<div class="flex justify-between items-start">
								<div>
									<p class="text-gray-500 text-sm font-medium">Total Meters</p>
									<p id="totalMetersCount" class="text-3xl font-bold mt-1 text-gray-800">0</p>
								</div>
								<div class="bg-blue-100 p-3 rounded-lg">
									<i class="fas fa-bolt text-blue-600 text-xl"></i>
								</div>
							</div>
							<div class="mt-4">
								<div class="h-2 bg-gray-200 rounded-full">
									<div class="h-full bg-blue-500 rounded-full" style="width: 100%"></div>
								</div>
							</div>
						</div>
						<div class="stat-card bg-white rounded-xl p-5 shadow-sm border-l-green-500">
							<div class="flex justify-between items-start">
								<div>
									<p class="text-gray-500 text-sm font-medium">Active Meters</p>
									<p id="activeMetersCount" class="text-3xl font-bold mt-1 text-gray-800">0</p>
								</div>
								<div class="bg-green-100 p-3 rounded-lg">
									<i class="fas fa-check-circle text-green-600 text-xl"></i>
								</div>
							</div>
							<div class="mt-4">
								<div class="h-2 bg-gray-200 rounded-full">
									<div id="activeProgress" class="h-full bg-green-500 rounded-full" style="width: 0%"></div>
								</div>
							</div>
						</div>
						<div class="stat-card bg-white rounded-xl p-5 shadow-sm border-l-red-500">
							<div class="flex justify-between items-start">
								<div>
									<p class="text-gray-500 text-sm font-medium">Inactive Meters</p>
									<p id="inactiveMetersCount" class="text-3xl font-bold mt-1 text-gray-800">0</p>
								</div>
								<div class="bg-red-100 p-3 rounded-lg">
									<i class="fas fa-times-circle text-red-600 text-xl"></i>
								</div>
							</div>
							<div class="mt-4">
								<div class="h-2 bg-gray-200 rounded-full">
									<div id="inactiveProgress" class="h-full bg-red-500 rounded-full" style="width: 0%"></div>
								</div>
							</div>
						</div>
						<div class="stat-card bg-white rounded-xl p-5 shadow-sm border-l-orange-500">
							<div class="flex justify-between items-start">
								<div>
									<p class="text-gray-500 text-sm font-medium">Active Alerts</p>
									<p id="alertMetersCount" class="text-3xl font-bold mt-1 text-gray-800">0</p>
								</div>
								<div class="bg-orange-100 p-3 rounded-lg">
									<i class="fas fa-exclamation-triangle text-orange-600 text-xl"></i>
								</div>
							</div>
							<div class="mt-4">
								<div class="h-2 bg-gray-200 rounded-full">
									<div id="alertProgress" class="h-full bg-orange-500 rounded-full" style="width: 0%"></div>
								</div>
							</div>
						</div>
					</div>
					<!-- Filter Controls -->
					<div class="bg-white rounded-xl shadow-sm p-4 mb-6">
						<h2 class="text-lg font-semibold text-gray-800 mb-3 flex items-center gap-2">
							<i class="fas fa-filter text-primary-600"></i>
							Filter Meters
						</h2>
						<div class="flex flex-wrap gap-3">
							<button id="showAll" class="filter-btn bg-primary-100 text-primary-800 px-4 py-2 rounded-lg font-medium flex items-center gap-2 active">
								<i class="fas fa-globe-americas"></i>
								Show All
							</button>
							<button id="showActive" class="filter-btn bg-green-100 text-green-800 px-4 py-2 rounded-lg font-medium flex items-center gap-2">
								<i class="fas fa-check-circle"></i>
								Active
							</button>
							<button id="showInactive" class="filter-btn bg-red-100 text-red-800 px-4 py-2 rounded-lg font-medium flex items-center gap-2">
								<i class="fas fa-times-circle"></i>
								Inactive
							</button>
							<button id="showAlerts" class="filter-btn bg-orange-100 text-orange-800 px-4 py-2 rounded-lg font-medium flex items-center gap-2">
								<i class="fas fa-exclamation-triangle"></i>
								Power Outage Alerts
							</button>
						</div>
					</div>
					<!-- Map Container -->
					<div class="bg-white rounded-xl shadow-sm p-4">
						<div class="flex justify-between items-center mb-4">
							<h2 class="text-lg font-semibold text-gray-800 flex items-center gap-2">
								<i class="fas fa-map-marked-alt text-primary-600"></i>
								Meter Locations
							</h2>
						</div>
						<div id="map" class="w-full h-[500px] rounded-lg overflow-hidden"></div>
					</div>
				</div>
				<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
				<link href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" rel="stylesheet"/>
				<script>
        // Custom markers
        const blueIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        const greenIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        const redIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        const orangeIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-orange.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        let map;
        let markers = [];

        function initMap() {
            map = L.map('map').setView([51.505, -0.09], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
        }
        
        // Simulate loading meter data
		async function loadMeters() {
			try {
				const url = '/v1/employee/sysadmin/dashboard/meter-list';
				const response = await fetch(url);

				if (!response.ok) {
				console.error(`Server returned HTTP ${response.status}`);
				return;
				}

				const smartMeters = await response.json();
				// smartMeters is now an array like:
				// [
				//   {
				//     "_id": "684640399ad5ad9989380938",
				//     "acctNo": 11111111,
				//     "address": "Brg.Calzada, Balayan, 4213 Batangas",
				//     "coordinates": [13.945487653703744, 120.73046879087848],
				//     "installDate": "2025-06-09T00:00:00Z",
				//     "isActive": true,
				//     "meterNumber": 1001,
				//     "smartMeteromitempty": {
				//       "alert": null,
				//       "isActive": false,
				//       "usagekwh": 79
				//     },
				//     "transformerId": "123"
				//   },
				//   // …more entries…
				// ]

				// 1) Count active/inactive based on root “isActive”
				const activeMeters = smartMeters.filter(m => m.isActive === true).length;
				const inactiveMeters = smartMeters.length - activeMeters;

				// 2) Count “active power_outage” alerts, treating alert == null as zero
				const alertCount = smartMeters.filter(m => {
				// Pull the “alert” array (or null) from smartMeteromitempty:
				const alerts = m.smartMeteromitempty?.alert;
				if (!Array.isArray(alerts)) {
					// If alert is null or missing, count as “no active alerts”
					return false;
				}
				// Otherwise check if any “power_outage” is “active”
				return alerts.some(a => a.Type === 'power_outage' && a.Status === 'active');
				}).length;

				// 3) Update the dashboard counters
				document.getElementById('totalMetersCount').textContent = smartMeters.length;
				document.getElementById('activeMetersCount').textContent = activeMeters;
				document.getElementById('inactiveMetersCount').textContent = inactiveMeters;
				document.getElementById('alertMetersCount').textContent = alertCount;

				// 4) Update progress bars
				document.getElementById('activeProgress').style.width =
				`${(activeMeters / smartMeters.length) * 100}%`;
				document.getElementById('inactiveProgress').style.width =
				`${(inactiveMeters / smartMeters.length) * 100}%`;
				document.getElementById('alertProgress').style.width =
				`${(alertCount / smartMeters.length) * 100}%`;

				// 5) Remove old markers
				markers.forEach(marker => map.removeLayer(marker));
				markers = [];

				// 6) Add a marker for each meter
				smartMeters.forEach(meter => {
				// Determine if there’s an active power_outage in this meter’s “alert” list
				const alerts = meter.smartMeteromitempty?.alert;
				const hasAlert = Array.isArray(alerts)
					? alerts.some(a => a.Type === 'power_outage' && a.Status === 'active')
					: false;

				// Use the root “isActive” for meter status
				const isActive = meter.isActive === true;
				const statusLabel = isActive ? 'Active' : 'Inactive';

				// Grab coordinates (assumed [lat, lng] from server)
				const coords = meter.coordinates;

				// Create the Leaflet marker at [lat, lng]
				const marker = L.marker(coords, { icon: blueIcon }).bindPopup(`
					<div class="p-2 min-w-[200px]">
					<h3 class="font-bold text-lg">Meter #${meter.meterNumber}</h3>
					<div class="flex items-center gap-2 mt-1">
						<i class="fas fa-id-card text-gray-600"></i>
						<span>Account: ${meter.acctNo}</span>
					</div>
					<div class="flex items-center gap-2 mt-1">
						<i class="fas fa-map-pin text-gray-600"></i>
						<span>Address: ${meter.address}</span>
					</div>
					<div class="flex items-center gap-2 mt-1">
						<i class="fas fa-bolt text-gray-600"></i>
						<span>Transformer: ${meter.transformerId}</span>
					</div>
					<div class="mt-2 flex items-center gap-2">
						<span class="px-2 py-1 rounded text-xs font-medium ${
						isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
						}">${statusLabel}</span>
						${
						hasAlert
							? '<span class="px-2 py-1 rounded text-xs font-medium bg-orange-100 text-orange-800">Power Outage Alert!</span>'
							: ''
						}
					</div>
					</div>
				`);

				marker.status = isActive ? 'active' : 'inactive';
				marker.hasAlert = hasAlert;
				markers.push(marker);
				});

				updateMapView();
			} catch (error) {
				console.error('Error loading meter data:', error);
			}
		}

        function updateMapView() {
            const filter = document.querySelector('.filter-btn.active')?.id || 'showAll';
            const bounds = new L.LatLngBounds();

            markers.forEach(marker => {
                let shouldShow = false;
                let icon = blueIcon;

                if (filter === 'showAll') {
                    shouldShow = true;
                } else if (filter === 'showActive') {
                    shouldShow = marker.status === 'active';
                    icon = greenIcon;
                } else if (filter === 'showInactive') {
                    shouldShow = marker.status === 'inactive';
                    icon = redIcon;
                } else if (filter === 'showAlerts') {
                    shouldShow = marker.hasAlert;
                    icon = orangeIcon;
                }

                if (shouldShow) {
                    marker.setIcon(icon);
                    if (!map.hasLayer(marker)) {
                        marker.addTo(map);
                    }
                    bounds.extend(marker.getLatLng());
                } else {
                    if (map.hasLayer(marker)) {
                        map.removeLayer(marker);
                    }
                }
            });

            if (bounds.isValid()) {
                map.fitBounds(bounds.pad(0.1));
            }
        }

        // Add event listeners to filter buttons
        document.querySelectorAll('.filter-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                e.target.classList.add('active');
                updateMapView();
            });
        });

        // Initialize the map and load data
        initMap();
        loadMeters();
        
        // Simulate data refresh every 30 seconds
        setInterval(() => {
            document.querySelector('#showAll').classList.add('animate-pulse');
            setTimeout(() => {
                loadMeters();
                document.querySelector('#showAll').classList.remove('animate-pulse');
            }, 1000);
        }, 30000);
    </script>
			</body>
		</html>
	}
}

//<-------------------------------------------------->//

//<---------------- Accounts Section ---------------->//
templ SystemAdminEmployeeAccountsWebPage() {
	@SystemAdminEmployeeBaseWebPage() {
		<div class="container mx-auto p-6 max-w-4xl">
			<!-- Overview Section -->
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h2 class="text-2xl font-semibold text-gray-800 mb-4">Overview</h2>
				<div class="bg-gray-100 rounded-lg h-48 flex items-center justify-center">
					<p class="text-gray-500">Account statistics and metrics will appear here</p>
				</div>
			</div>
			<!-- Create Account Section -->
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h2 class="text-2xl font-semibold text-gray-800 mb-6">Create Account</h2>
				<!-- Account Type Selector -->
				<div class="flex space-x-4 mb-8">
					<button
						hx-get="accounts/create/meter-form"
						hx-target="#create-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Meter
					</button>
					<button
						hx-get="accounts/create/consumer-form"
						hx-target="#create-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Consumer
					</button>
					<button
						hx-get="accounts/create/employee-form"
						hx-target="#create-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Employee
					</button>
				</div>
				<!-- Dynamic Form Container -->
				<div id="create-account-form-container">
					<!-- Initial empty state -->
					<p class="text-gray-500 text-center py-4">
						Please select an account type to begin
					</p>
				</div>
			</div>
			<!-- Update Account Section -->
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h2 class="text-2xl font-semibold text-gray-800 mb-6">Update Account</h2>
				<!-- Account Type Selector -->
				<div class="flex space-x-4 mb-8">
					<button
						hx-get="accounts/update/meter-form"
						hx-target="#update-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Meter
					</button>
					<button
						hx-get="accounts/update/consumer-form"
						hx-target="#update-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Consumer
					</button>
					<button
						hx-get="accounts/update/employee-form"
						hx-target="#update-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Employee
					</button>
				</div>
				<!-- Dynamic Form Container -->
				<div id="update-account-form-container">
					<!-- Initial empty state -->
					<p class="text-gray-500 text-center py-4">
						Please select an account type to begin
					</p>
				</div>
			</div>
			<!-- Delete Account Section -->
			<div class="bg-white rounded-lg shadow-md p-6 mb-8">
				<h2 class="text-2xl font-semibold text-gray-800 mb-6">Delete Account</h2>
				<!-- Account Type Selector -->
				<div class="flex space-x-4 mb-8">
					<button
						hx-get="accounts/delete/meter-form"
						hx-target="#delete-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Meter
					</button>
					<button
						hx-get="accounts/delete/consumer-form"
						hx-target="#delete-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Consumer
					</button>
					<button
						hx-get="accounts/delete/employee-form"
						hx-target="#delete-account-form-container"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-lg bg-green-100 text-green-700 
                                   hover:bg-green-200 focus:outline-none focus:ring-2 
                                   focus:ring-green-500 transition-all active:ring-2"
					>
						Employee
					</button>
				</div>
				<!-- Dynamic Form Container -->
				<div id="delete-account-form-container">
					<!-- Initial empty state -->
					<p class="text-gray-500 text-center py-4">
						Please select an account type to begin
					</p>
				</div>
			</div>
		</div>
	}
}

templ NewMeterAccountForm(usecase string) {
	if usecase == "create" {
		<form
			hx-post="/v1/employee/sysadmin/accounts/create/create-meter-form"
			hx-target="#create-meter-form-response"
			hx-swap="innerHTML"
			class="space-y-6"
		>
			// Horizontal line        
			<div class="w-full h-px bg-gray-300 mb-4"></div>
			// Serial Number Group
			<div class="grid grid-cols-6 gap-10 mb-8">
				<!-- Consumer Account Number (Row 1, Column 1) -->
				<div class="col-span-2">
					<label for="create-consumer-acc-no" class="block text-sm font-medium text-gray-700 mb-2">
						Consumer Account Number
					</label>
					<input
						type="number"
						id="create-consumer-acc-no"
						name="create-consumer-acc-no"
						class="block w-full px-4 py-3 border border-gray-300 
								rounded-lg focus:ring-green-500 focus:border-green-500 
								placeholder-gray-400 placeholder:text-sm
								[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
						placeholder="Account Number"
						required
					/>
				</div>
				<!-- Meter Number (Row 1, Column 2-3) -->
				<div class="col-span-2">
					<label for="create-meter-no" class="block text-sm font-medium text-gray-700 mb-2">
						Meter Number
					</label>
					<input
						type="text"
						id="create-meter-no"
						name="create-meter-no"
						class="block w-full px-4 py-3 border border-gray-300 
								rounded-lg focus:ring-green-500 focus:border-green-500 
								placeholder-gray-400"
						placeholder="Meter Number"
						required
					/>
				</div>
			</div>
			// Horizontal dashed-line
			<div class="w-full border-t border-dashed border-gray-300"></div>
			// Installation and GeoLocation Group
			<div class="grid grid-cols-4 gap-10 mb-8">
				<div>
					<label for="create-meter-installation-date" class="block text-sm font-medium text-gray-700 mb-2">
						Installation Date
					</label>
					<input
						type="date"
						id="create-meter-installation-date"
						name="create-meter-installation-date"
						class="block w-full px-4 py-3 border border-gray-300 
							rounded-lg focus:ring-green-500 focus:border-green-500 
							placeholder-gray-400"
					/>
				</div>
				<script>
					// Set default date to today (client-side)
					document.getElementById('create-meter-installation-date').value = 
						new Date().toISOString().split('T')[0];
				</script>
				<div>
					<label for="create-meter-transformer-id" class="block text-sm font-medium text-gray-700 mb-2">
						Transformer ID
					</label>
					<input
						type="number"
						id="create-consumer-transformer-id"
						name="create-consumer-transformer-id"
						class="block w-full px-4 py-3 border border-gray-300 
								rounded-lg focus:ring-green-500 focus:border-green-500 
								placeholder-gray-400 placeholder:text-sm
								[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
						placeholder="Transformer ID"
					/>
				</div>
			</div>
			// Horizontal dashed-line
			<div class="w-full border-t border-dashed border-gray-300"></div>
			<div class="flex flex-col mb-8">
				<div>
					<label for="geolocation" class="block text-sm font-medium text-gray-700 mb-2">
						Geolocation
					</label>
					<div
						class="grid grid-cols-2 gap-5"
						id="geolocation"
					>
						<input
							type="number"
							step="any"
							id="create-meter-longitude"
							name="create-meter-longitude"
							class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
							placeholder="Longitude"
						/>
						<input
							type="number"
							step="any"
							id="create-meter-latitude"
							name="create-meter-latitude"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm
									[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
							placeholder="Latitude"
						/>
					</div>
				</div>
				<div class="grid grid-cols-3">
					<div class="col-span-2">
						<label for="create-meter-address" class="block text-sm font-medium text-gray-700 mb-2">
							Addresss
						</label>
						<input
							type="text"
							id="create-meter-address"
							name="create-meter-address"
							class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
							placeholder="Adresss"
						/>
					</div>
				</div>
			</div>
			// Horizontal line        
			<div class="w-full h-px bg-gray-300 mb-4"></div>
			<div class="flex justify-end">
				<button
					type="submit"
					class="px-6 py-3 bg-green-600 hover:bg-green-700 
							text-white font-medium rounded-lg 
							transition-all shadow-md hover:shadow-lg 
							focus:outline-none focus:ring-2 focus:ring-green-500"
				>
					Create Meter Account
				</button>
			</div>
			<div id="create-meter-form-response"></div>
			<!-- Loading Overlay -->
			<div id="loading-overlay" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="flex items-center space-x-3 bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<div class="animate-spin h-6 w-6 border-4 border-green-500 rounded-full border-t-transparent"></div>
					<span class="text-gray-700 font-medium">Creating Meter Account...</span>
				</div>
			</div>
			<!-- Success Message -->
			<div id="success-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-green-500 font-medium text-lg">✓ Meter account created successfully!</p>
				</div>
			</div>
		</form>
		<!-- Add this error message div before the script -->
		<div id="error-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
			<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
				<p class="text-red-500 font-medium text-lg" id="error-text"></p>
			</div>
		</div>
		<script>
			document.addEventListener('htmx:afterOnLoad', function(evt) {
				if (evt.detail.elt === document.querySelector('form')) {
					const loadingOverlay = document.getElementById('loading-overlay');
					const successMessage = document.getElementById('success-message');
					const errorMessage = document.getElementById('error-message');
					const form = document.querySelector('form');

					loadingOverlay.classList.add('hidden');

					if (evt.detail.successful) {
						// Success handling (existing code)
						form.reset();
						document.getElementById('create-meter-installation-date').value = 
							new Date().toISOString().split('T')[0];
						successMessage.classList.remove('hidden');
						setTimeout(() => {
							successMessage.classList.add('hidden');
						}, 3000);
					} else {
						// Error handling
						try {
							const response = JSON.parse(evt.detail.xhr.responseText);
							document.getElementById('error-text').textContent = response.error;
							errorMessage.classList.remove('hidden');
							setTimeout(() => {
								errorMessage.classList.add('hidden');
							}, 3000);
						} catch (e) {
							console.error('Error parsing response:', e);
						}
					}
				}
			});
		</script>
	} else if usecase == "update" {
		<div class="space-y-6">
			<!-- Verification Form -->
			<form
				id="verify-form"
				hx-post="/v1/employee/sysadmin/accounts/update/update-meter-form/verify"
				hx-target="#update-form-container"
				hx-swap="none"
				class="space-y-6"
			>
				<div class="grid grid-cols-6 gap-10 mb-8">
					<div class="col-span-3">
						<label for="verify-meter-no" class="block text-sm font-medium text-gray-700 mb-2">
							Enter Meter Number to Update
						</label>
						<input
							type="text"
							id="verify-meter-no"
							name="meter-no"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
							placeholder="Meter Number"
							required
						/>
					</div>
					<div class="col-span-3 flex items-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
								text-white font-medium rounded-lg 
								transition-all shadow-md hover:shadow-lg 
								focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							Verify Meter
						</button>
					</div>
				</div>
			</form>
			<!-- Update Form Container (Initially hidden) -->
			<div id="update-form-container"></div>
			<!-- Loading Overlay -->
			<div id="loading-overlay" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="flex items-center space-x-3 bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<div class="animate-spin h-6 w-6 border-4 border-green-500 rounded-full border-t-transparent"></div>
					<span class="text-gray-700 font-medium">Verifying Meter...</span>
				</div>
			</div>
			<!-- Error Message -->
			<div id="error-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-red-500 font-medium text-lg" id="error-text"></p>
				</div>
			</div>
			<!-- Success Message -->
			<div id="success-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-green-500 font-medium text-lg">✓ Meter account updated successfully!</p>
				</div>
			</div>
			<script>
				document.addEventListener('htmx:afterOnLoad', function(evt) {
					const loadingOverlay = document.getElementById('loading-overlay');
					const errorMessage = document.getElementById('error-message');
					
					// Always hide loading overlay first
					loadingOverlay.classList.add('hidden');

					// Handle verification response
					if (evt.detail.requestConfig && evt.detail.requestConfig.path.includes('/verify')) {
						if (evt.detail.successful) {
							const verifyForm = document.getElementById('verify-form');
							const container  = document.getElementById('update-form-container');
							const template   = document.getElementById('update-form-template');
							const response   = JSON.parse(evt.detail.xhr.responseText);

							// Hide the verify form
							verifyForm.classList.add('hidden');

							// Populate and show the update form
							const clone = template.content.cloneNode(true);
							const form  = clone.querySelector('#update-form');
							form.querySelector('#update-meter-no').value                 = response.meterNo;
							form.querySelector('#update-consumer-acc-no').value         = response.consumerAccNo;
							form.querySelector('#update-meter-installation-date').value = response.installationDate;
							form.querySelector('#update-consumer-transformer-id').value = response.transformerId;
							form.querySelector('#update-meter-latitude').value          = response.latitude;
							form.querySelector('#update-meter-longitude').value         = response.longitude;

							container.appendChild(clone);

							// Re-scan new content
							htmx.process(container);

						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}

					// Handle update submission response
					if (evt.detail.elt.closest('form')?.id === 'update-form') {
						if (evt.detail.successful) {
							document.getElementById('success-message').classList.remove('hidden');
							setTimeout(() => {
								document.getElementById('success-message').classList.add('hidden');

								// Reset the form and UI
								const container = document.getElementById('update-form-container');
								const verifyForm = document.getElementById('verify-form');
								
								// 1. Clear update form
								container.innerHTML = '';
								
								// 2. Show verify form again
								verifyForm.classList.remove('hidden');
								
								// 3. Reset verify form input
								document.getElementById('verify-meter-no').value = '';
							}, 3000);
						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}
				});

				document.addEventListener('htmx:beforeRequest', function(evt) {
					if (evt.detail.elt.closest('form')) {
						document.getElementById('loading-overlay').classList.remove('hidden');
					}
				});

				// Additional safety check for overlay visibility
				document.addEventListener('htmx:afterSwap', function(evt) {
					if (evt.detail.target.id === 'update-form-container' && 
						evt.detail.requestConfig.path.includes('verify')) {
						const loadingOverlay = document.getElementById('loading-overlay');
						loadingOverlay.classList.add('hidden');
					}
				});
			</script>
			<template id="update-form-template">
				<form
					id="update-form"
					hx-post="/v1/employee/sysadmin/accounts/update/update-meter-form"
					hx-target="#form-response"
					hx-swap="none"
					class="space-y-6"
				>
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					<div class="grid grid-cols-6 gap-10 mb-8">
						<div class="col-span-2">
							<label for="consumer-acc-no" class="block text-sm font-medium text-gray-700 mb-2">
								Consumer Account Number
							</label>
							<input
								type="number"
								id="update-consumer-acc-no"
								name="consumer-acc-no"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm
									[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								required
							/>
						</div>
						<div class="col-span-2">
							<label for="meter-no" class="block text-sm font-medium text-gray-700 mb-2">
								Meter Number
							</label>
							<input
								type="text"
								id="update-meter-no"
								name="meter-no"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
								readonly
							/>
						</div>
					</div>
					<div class="w-full border-t border-dashed border-gray-300"></div>
					<div class="grid grid-cols-4 gap-10 mb-8">
						<div>
							<label for="meter-installation-date" class="block text-sm font-medium text-gray-700 mb-2">
								Installation Date
							</label>
							<input
								type="date"
								id="update-meter-installation-date"
								name="meter-installation-date"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
							/>
						</div>
						<div>
							<label for="meter-transformer-id" class="block text-sm font-medium text-gray-700 mb-2">
								Transformer ID
							</label>
							<input
								type="number"
								id="update-consumer-transformer-id"
								name="consumer-transformer-id"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm
									[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
							/>
						</div>
					</div>
					<div class="w-full border-t border-dashed border-gray-300"></div>
					<div class="grid grid-cols-2 gap-10 mb-8">
						<div>
							<label for="consumer-postal-code" class="block text-sm font-medium text-gray-700 mb-2">
								Geolocation
							</label>
							<div class="grid grid-cols-2 gap-5">
								<input
									type="number"
									id="update-meter-latitude"
									name="meter-latitude"
									class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								/>
								<input
									type="number"
									id="update-meter-longitude"
									name="meter-longitude"
									class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								/>
							</div>
						</div>
					</div>
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					<div class="flex justify-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
									text-white font-medium rounded-lg 
									transition-all shadow-md hover:shadow-lg 
									focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							Update Meter Account
						</button>
					</div>
					<div id="form-response"></div>
				</form>
			</template>
		</div>
	} else if usecase == "delete" {
		<div class="space-y-6">
			<!-- Verification Form -->
			<form
				id="delete-verify-form"
				hx-post="/v1/employee/sysadmin/accounts/delete/delete-meter-form/verify"
				hx-target="#delete-form-container"
				hx-swap="none"
				class="space-y-6"
			>
				<div class="grid grid-cols-6 gap-10 mb-8">
					<div class="col-span-3">
						<label for="verify-meter-no" class="block text-sm font-medium text-gray-700 mb-2">
							Enter Meter Number to Update
						</label>
						<input
							type="text"
							id="verify-delete-meter-no"
							name="meter-no"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
							placeholder="Meter Number"
							required
						/>
					</div>
					<div class="col-span-3 flex items-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
								text-white font-medium rounded-lg 
								transition-all shadow-md hover:shadow-lg 
								focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							Verify Meter
						</button>
					</div>
				</div>
			</form>
			<!-- Update Form Container (Initially hidden) -->
			<div id="delete-form-container"></div>
			<!-- Loading Overlay -->
			<div id="delete-loading-overlay" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="flex items-center space-x-3 bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<div class="animate-spin h-6 w-6 border-4 border-green-500 rounded-full border-t-transparent"></div>
					<span class="text-gray-700 font-medium">Verifying Meter...</span>
				</div>
			</div>
			<!-- Error Message -->
			<div id="delete-error-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-red-500 font-medium text-lg" id="error-text"></p>
				</div>
			</div>
			<!-- Success Message -->
			<div id="delete-success-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-green-500 font-medium text-lg">✓ Meter account updated successfully!</p>
				</div>
			</div>
			<script>
				document.addEventListener('htmx:afterOnLoad', function(evt) {
					const loadingOverlay = document.getElementById('delete-loading-overlay');
					const errorMessage = document.getElementById('delete-error-message');
					
					// Always hide loading overlay first
					loadingOverlay.classList.add('hidden');

					// Handle verification response
					if (evt.detail.requestConfig && evt.detail.requestConfig.path.includes('/verify')) {
						if (evt.detail.successful) {
							const verifyForm = document.getElementById('delete-verify-form');
							const container  = document.getElementById('delete-form-container');
							const template   = document.getElementById('delete-form-template');
							const response   = JSON.parse(evt.detail.xhr.responseText);

							// Hide the verify form
							verifyForm.classList.add('hidden');

							// Populate and show the update form
							const clone = template.content.cloneNode(true);
							const form  = clone.querySelector('#delete-form');
							form.querySelector('#delete-meter-no').value                 = response.meterNo;
							form.querySelector('#delete-consumer-acc-no').value         = response.consumerAccNo;
							form.querySelector('#delete-meter-installation-date').value = response.installationDate;
							form.querySelector('#delete-consumer-transformer-id').value = response.transformerId;
							form.querySelector('#delete-meter-latitude').value          = response.latitude;
							form.querySelector('#delete-meter-longitude').value         = response.longitude;

							container.appendChild(clone);

							// Re-scan new content
							htmx.process(container);

						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}

					// Handle update submission response
					if (evt.detail.elt.closest('form')?.id === 'delete-form') {
						if (evt.detail.successful) {
							document.getElementById('delete-success-message').classList.remove('hidden');
							setTimeout(() => {
								document.getElementById('delete-success-message').classList.add('hidden');

								// Reset the form and UI
								const container = document.getElementById('delete-form-container');
								const verifyForm = document.getElementById('delete-verify-form');
								
								// 1. Clear update form
								container.innerHTML = '';
								
								// 2. Show verify form again
								verifyForm.classList.remove('hidden');
								
								// 3. Reset verify form input
								document.getElementById('verify-delete-meter-no').value = '';
							}, 3000);
						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}
				});

				document.addEventListener('htmx:beforeRequest', function(evt) {
					if (evt.detail.elt.closest('form')) {
						document.getElementById('delete-loading-overlay').classList.remove('hidden');
					}
				});

				// Additional safety check for overlay visibility
				document.addEventListener('htmx:afterSwap', function(evt) {
					if (evt.detail.target.id === 'delete-form-container' && 
						evt.detail.requestConfig.path.includes('verify')) {
						const loadingOverlay = document.getElementById('delete-loading-overlay');
						loadingOverlay.classList.add('hidden');
					}
				});
			</script>
			<!-- Delete Form Template -->
			<template id="delete-form-template">
				<form
					id="delete-form"
					hx-post="/v1/employee/sysadmin/accounts/delete/delete-meter-form"
					hx-target="#delete-form-response"
					hx-swap="none"
					class="space-y-6"
				>
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					<div class="grid grid-cols-6 gap-10 mb-8">
						<div class="col-span-2">
							<label for="delete-consumer-acc-no" class="block text-sm font-medium text-gray-700 mb-2">
								Consumer Account Number
							</label>
							<input
								type="number"
								id="delete-consumer-acc-no"
								name="consumer-acc-no"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm
									[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								disable
								readonly
							/>
						</div>
						<div class="col-span-2">
							<label for="delete-meter-no" class="block text-sm font-medium text-gray-700 mb-2">
								Meter Number
							</label>
							<input
								type="text"
								id="delete-meter-no"
								name="meter-no"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
								required
								readonly
							/>
						</div>
					</div>
					<div class="w-full border-t border-dashed border-gray-300"></div>
					<div class="grid grid-cols-4 gap-10 mb-8">
						<div>
							<label for="delete-meter-installation-date" class="block text-sm font-medium text-gray-700 mb-2">
								Installation Date
							</label>
							<input
								type="date"
								id="delete-meter-installation-date"
								name="meter-installation-date"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
								disable
								readonly
							/>
						</div>
						<div>
							<label for="delete-consumer-transformer-id" class="block text-sm font-medium text-gray-700 mb-2">
								Transformer ID
							</label>
							<input
								type="number"
								id="delete-consumer-transformer-id"
								name="consumer-transformer-id"
								class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm
									[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								disable
								readonly
							/>
						</div>
					</div>
					<div class="w-full border-t border-dashed border-gray-300"></div>
					<div class="grid grid-cols-2 gap-10 mb-8">
						<div>
							<label for="delete-meter-latitude" class="block text-sm font-medium text-gray-700 mb-2">
								Geolocation
							</label>
							<div class="grid grid-cols-2 gap-5">
								<input
									type="number"
									id="delete-meter-latitude"
									name="meter-latitude"
									class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
									disable
									readonly
								/>
								<input
									type="number"
									id="delete-meter-longitude"
									name="meter-longitude"
									class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
									disable
									readonly
								/>
							</div>
						</div>
					</div>
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					<div class="flex justify-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
									text-white font-medium rounded-lg 
									transition-all shadow-md hover:shadow-lg 
									focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							Delete Meter Account
						</button>
					</div>
					<div id="delete-form-response"></div>
				</form>
			</template>
		</div>
	}
}

templ NewConsumerAccountForm(usecase string) {
	if usecase == "create" {
		<div class="space-y-6">
			<form
				hx-post="/v1/employee/sysadmin/accounts/create/create-consumer-form"
				hx-target="#create-consumer-form-response"
				hx-swap="innerHTML"
				class="space-y-6"
			>
				// Horizontal line        
				<div class="w-full h-px bg-gray-300 mb-4"></div>
				// Account Number group
				<div class="mb-8 grid grid-cols-4 gap-4">
					<!-- Account Number (Row 1, Column 1) -->
					<div class="col-span-2">
						<label
							for="create-consumer-acc-no"
							class="mb-2 block text-sm font-medium text-gray-700"
						>
							Account Number 
						</label>
						<input
							type="text"
							id="create-consumer-acc-no"
							name="create-consumer-acc-no"
							class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
							placeholder="Account Number (Optional)"
						/>
					</div>
				</div>
				// Horizontal dashed-line
				<div class="w-full border-t border-dashed border-gray-300"></div>
				// Consumer Name group
				<div class="mb-8 grid grid-cols-4 gap-4">
					<!-- First Name (Row 1, Column 1) -->
					<div>
						<label
							for="create-consumer-first-name"
							class="mb-2 block text-sm font-medium text-gray-700"
						>
							First Name 
						</label>
						<input
							type="text"
							id="create-consumer-first-name"
							name="create-consumer-first-name"
							class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
							placeholder="First name"
						/>
					</div>
					<!-- Middle Name (Row 1, Column 2) -->
					<div>
						<label
							for="create-consumer-middle-name"
							class="mb-2 block text-sm font-medium text-gray-700"
						>
							Middle Name 
						</label>
						<input
							type="text"
							id="create-consumer-middle-name"
							name="create-consumer-middle-name"
							class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
							placeholder="Middle name"
						/>
					</div>
					<!-- Last Name (Row 1, Column 3) -->
					<div>
						<label
							for="create-consumer-last-name"
							class="mb-2 block text-sm font-medium text-gray-700"
						>
							Last Name 
						</label>
						<input
							type="text"
							id="create-consumer-last-name"
							name="create-consumer-last-name"
							class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
							placeholder="Last name"
						/>
					</div>
					<!-- Suffix (Row 1, Column 4) -->
					<div>
						<label
							for="create-consumer-suffix-name"
							class="mb-2 block text-sm font-medium text-gray-700"
						>
							Suffix 
						</label>
						<input
							type="text"
							id="create-consumer-suffix-name"
							name="create-consumer-suffix-name"
							class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
							placeholder="Suffix (optional)"
						/>
					</div>
					<!-- Birth Date (Row 1, Column 5) -->
					<div>
						<label
							for="create-consumer-birth-date"
							class="mb-2 block text-sm font-medium text-gray-700"
						>
							Birth Date 
						</label>
						<input
							type="date"
							id="create-consumer-birth-date"
							name="create-consumer-birth-date"
							class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
						/>
					</div>
				</div>
				// Horizontal dashed-line
				<div class="w-full border-t border-dashed border-gray-300"></div>
				// Consumer Address group
				<div class="grid grid-cols-3 gap-4 mb-8">
					<!-- Province (Row 1, Column 1) -->
					<div>
						<label
							for="create-consumer-province"
							class="block text-sm font-medium text-gray-700 mb-2"
						>
							Province
						</label>
						<input
							type="text"
							id="create-consumer-province"
							name="create-consumer-province"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm"
							placeholder="Province"
						/>
					</div>
					<!-- Postal Code (Row 1, Column 2) -->
					<div>
						<label
							for="create-consumer-postal-code"
							class="block text-sm font-medium text-gray-700 mb-2"
						>
							Postal Code
						</label>
						<input
							type="number"
							id="create-consumer-postal-code"
							name="create-consumer-postal-code"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm
									[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
							placeholder="Postal Code"
						/>
					</div>
					<!-- Municipality (Row 1, Column 3) -->
					<div>
						<label
							for="create-consumer-city-municipality"
							class="block text-sm font-medium text-gray-700 mb-2"
						>
							City/Municipality
						</label>
						<input
							type="text"
							id="create-consumer-city-municipality"
							name="create-consumer-city-municipality"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm"
							placeholder="City/Municipality"
						/>
					</div>
					<!-- Barangay (Row 2, Column 1) -->
					<div>
						<label
							for="create-consumer-barangay"
							class="block text-sm font-medium text-gray-700 mb-2"
						>
							Barangay
						</label>
						<input
							type="text"
							id="create-consumer-barangay"
							name="create-consumer-barangay"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm"
							placeholder="Barangay"
						/>
					</div>
					<!-- Street Address (Row 2, Columns 2-3) -->
					<div class="col-span-2">
						<label
							for="create-consumer-street"
							class="block text-sm font-medium text-gray-700 mb-2"
						>
							House or Building Number, Street Name
						</label>
						<input
							type="text"
							id="create-consumer-street"
							name="create-consumer-street"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm"
							placeholder="House/Building Number, Street Name"
						/>
					</div>
				</div>
				// Horizontal dashed-line
				<div class="w-full border-t border-dashed border-gray-300"></div>
				// Contact Info Group
				<div class="grid grid-cols-3 gap-4 mb-8">
					<div>
						<label
							for="create-consumer-phone-number"
							class="block text-sm font-medium text-gray-700 mb-2"
						>
							Phone Number
						</label>
						<input
							type="number"
							id="create-consumer-phone-number"
							name="create-consumer-phone-number"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400 placeholder:text-sm
									[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
							placeholder="Phone Number"
						/>
					</div>
				</div>
				// Horizontal Line
				<div class="w-full h-px bg-gray-300 mb-4"></div>
				<div class="flex justify-end">
					<button
						type="submit"
						class="px-6 py-3 bg-green-600 hover:bg-green-700 
								text-white font-medium rounded-lg 
								transition-all shadow-md hover:shadow-lg 
								focus:outline-none focus:ring-2 focus:ring-green-500"
					>
						Create Consumer Account
					</button>
				</div>
				<div id="create-consumer-form-response"></div>
				<!-- Loading Overlay -->
				<div id="create-consumer-loading-overlay" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
					<div class="flex items-center space-x-3 bg-white p-6 rounded-lg shadow-lg border border-gray-200">
						<div class="animate-spin h-6 w-6 border-4 border-green-500 rounded-full border-t-transparent"></div>
						<span class="text-gray-700 font-medium">Creating Meter Account...</span>
					</div>
				</div>
				<!-- Success Message -->
				<div id="create-consumer-success-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
					<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
						<p class="text-green-500 font-medium text-lg">✓ Meter account created successfully!</p>
					</div>
				</div>
			</form>
			<!-- Add this error message div before the script -->
			<div id="create-consumer-error-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-red-500 font-medium text-lg" id="create-consumer-error-text"></p>
				</div>
			</div>
			<script>
				document.addEventListener('htmx:afterOnLoad', function(evt) {
					if (evt.detail.elt === document.querySelector('form')) {
						const loadingOverlay = document.getElementById('create-consumer-loading-overlay');
						const successMessage = document.getElementById('create-consumer-success-message');
						const errorMessage = document.getElementById('create-consumer-error-message');
						const form = document.querySelector('form');

						loadingOverlay.classList.add('hidden');

						if (evt.detail.successful) {
							// Success handling (existing code)
							form.reset();
							successMessage.classList.remove('hidden');
							setTimeout(() => {
								successMessage.classList.add('hidden');
							}, 3000);
						} else {
							// Error handling
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('create-consumer-error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}
				});
			</script>
		</div>
	} else if usecase == "update" {
		<div class="space-y-6">
			<!-- Verification Form -->
			<form
				id="update-consumer-verify-form"
				hx-post="/v1/employee/sysadmin/accounts/update/update-consumer-form/verify"
				hx-target="#update-consumer-form-container"
				hx-swap="none"
				class="space-y-6"
			>
				<div class="grid grid-cols-6 gap-10 mb-8">
					<div class="col-span-3">
						<label for="update-verify-consumer-acc-no" class="block text-sm font-medium text-gray-700 mb-2">
							Enter Account Number to Update
						</label>
						<input
							type="text"
							id="update-verify-consumer-acc-no"
							name="update-consumer-acc-no"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
							placeholder="Account Number"
							required
						/>
					</div>
					<div class="col-span-3 flex items-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
								text-white font-medium rounded-lg 
								transition-all shadow-md hover:shadow-lg 
								focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							Verify Account Number
						</button>
					</div>
				</div>
			</form>
			<!-- Update Form Container (Initially hidden) -->
			<div id="update-consumer-form-container"></div>
			<!-- Loading Overlay -->
			<div id="update-consumer-loading-overlay" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="flex items-center space-x-3 bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<div class="animate-spin h-6 w-6 border-4 border-green-500 rounded-full border-t-transparent"></div>
					<span class="text-gray-700 font-medium">Verifying Account Number...</span>
				</div>
			</div>
			<!-- Error Message -->
			<div id="update-consumer-error-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-red-500 font-medium text-lg" id="update-consumer-error-text"></p>
				</div>
			</div>
			<!-- Success Message -->
			<div id="update-consumer-success-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-green-500 font-medium text-lg">✓ Meter account updated successfully!</p>
				</div>
			</div>
			<script>
				document.addEventListener('htmx:afterOnLoad', function(evt) {
					const loadingOverlay = document.getElementById('update-consumer-loading-overlay');
					const errorMessage = document.getElementById('update-consumer-error-message');
					
					// Always hide loading overlay first
					loadingOverlay.classList.add('hidden');

					// Handle verification response
					if (evt.detail.requestConfig && evt.detail.requestConfig.path.includes('/verify')) {
						if (evt.detail.successful) {
							const verifyForm = document.getElementById('update-consumer-verify-form');
							const container  = document.getElementById('update-consumer-form-container');
							const template   = document.getElementById('update-consumer-form-template');
							const response   = JSON.parse(evt.detail.xhr.responseText);

							// Hide the verify form
							verifyForm.classList.add('hidden');

							// Populate and show the update form
							const clone = template.content.cloneNode(true);
							const form  = clone.querySelector('#update-consumer-form');
							form.querySelector('#update-consumer-acc-no').value = response.acctNum;
							form.querySelector('#update-consumer-first-name').value = response.firstName;
							form.querySelector('#update-consumer-middle-name').value = response.middleName;
							form.querySelector('#update-consumer-last-name').value = response.lastName;
							form.querySelector('#update-consumer-suffix-name').value = response.suffix;
							form.querySelector('#update-consumer-birth-date').value = response.birthDate;
							form.querySelector('#update-consumer-province').value = response.province;
							form.querySelector('#update-consumer-postal-code').value = response.postalCode;
							form.querySelector('#update-consumer-city-municipality').value = response.cityMun;
							form.querySelector('#update-consumer-barangay').value = response.barangay;
							form.querySelector('#update-consumer-street').value = response.street;
							form.querySelector('#update-consumer-phone-number').value = response.phoneNum;
							

							container.appendChild(clone);

							// Re-scan new content
							htmx.process(container);

						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('update-consumer-error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}

					// Handle update submission response
					if (evt.detail.elt.closest('form')?.id === 'update-consumer-form') {
						if (evt.detail.successful) {
							document.getElementById('update-consumer-success-message').classList.remove('hidden');
							setTimeout(() => {
								document.getElementById('update-consumer-success-message').classList.add('hidden');

								// Reset the form and UI
								const container = document.getElementById('update-consumer-form-container');
								const verifyForm = document.getElementById('update-consumer-verify-form');
								

								// 1. Clear update form
								container.innerHTML = '';
								
								// 2. Show verify form again
								verifyForm.classList.remove('hidden');
								
								// 3. Reset verify form input
								document.getElementById('update-verify-consumer-acc-no').value = '';
								
							}, 3000);
						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('update-consumer-error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}
				});

				document.addEventListener('htmx:beforeRequest', function(evt) {
					if (evt.detail.elt.closest('form')) {
						document.getElementById('update-consumer-loading-overlay').classList.remove('hidden');
					}
				});

				// Additional safety check for overlay visibility
				document.addEventListener('htmx:afterSwap', function(evt) {
					if (evt.detail.target.id === 'update-consumer-form-container' && 
						evt.detail.requestConfig.path.includes('verify')) {
						const loadingOverlay = document.getElementById('update-consumer-loading-overlay');
						loadingOverlay.classList.add('hidden');
					}
				});
			</script>
			<!-- Update Form Template -->
			<template id="update-consumer-form-template">
				<form
					id="update-consumer-form"
					hx-post="/v1/employee/sysadmin/accounts/update/update-consumer-form"
					hx-target="#update-consumer-form-response"
					hx-swap="none"
					class="space-y-6"
				>
					// Horizontal line        
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					// Account Number group
					<div class="mb-8 grid grid-cols-4 gap-4">
						<!-- Account Number (Row 1, Column 1) -->
						<div class="col-span-2">
							<label
								for="update-consumer-acc-no"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Account Number 
							</label>
							<input
								type="text"
								id="update-consumer-acc-no"
								name="update-consumer-acc-no"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Account Number (Optional)"
								readonly
							/>
						</div>
					</div>
					// Horizontal dashed-line
					<div class="w-full border-t border-dashed border-gray-300"></div>
					// Consumer Name group
					<div class="mb-8 grid grid-cols-4 gap-4">
						<!-- First Name (Row 1, Column 1) -->
						<div>
							<label
								for="update-consumer-first-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								First Name 
							</label>
							<input
								type="text"
								id="update-consumer-first-name"
								name="update-consumer-first-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="First name"
							/>
						</div>
						<!-- Middle Name (Row 1, Column 2) -->
						<div>
							<label
								for="update-consumer-middle-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Middle Name 
							</label>
							<input
								type="text"
								id="update-consumer-middle-name"
								name="update-consumer-middle-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Middle name"
							/>
						</div>
						<!-- Last Name (Row 1, Column 3) -->
						<div>
							<label
								for="update-consumer-last-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Last Name 
							</label>
							<input
								type="text"
								id="update-consumer-last-name"
								name="update-consumer-last-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Last name"
							/>
						</div>
						<!-- Suffix (Row 1, Column 4) -->
						<div>
							<label
								for="update-consumer-suffix-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Suffix 
							</label>
							<input
								type="text"
								id="update-consumer-suffix-name"
								name="update-consumer-suffix-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Suffix (optional)"
							/>
						</div>
						<!-- Birth Date (Row 1, Column 5) -->
						<div>
							<label
								for="update-consumer-birth-date"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Birth Date 
							</label>
							<input
								type="date"
								id="update-consumer-birth-date"
								name="update-consumer-birth-date"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
							/>
						</div>
					</div>
					// Horizontal dashed-line
					<div class="w-full border-t border-dashed border-gray-300"></div>
					// Consumer Address group
					<div class="grid grid-cols-3 gap-4 mb-8">
						<!-- Province (Row 1, Column 1) -->
						<div>
							<label
								for="update-consumer-province"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Province
							</label>
							<input
								type="text"
								id="update-consumer-province"
								name="update-consumer-province"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="Province"
							/>
						</div>
						<!-- Postal Code (Row 1, Column 2) -->
						<div>
							<label
								for="update-consumer-postal-code"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Postal Code
							</label>
							<input
								type="number"
								id="update-consumer-postal-code"
								name="update-consumer-postal-code"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								placeholder="Postal Code"
							/>
						</div>
						<!-- Municipality (Row 1, Column 3) -->
						<div>
							<label
								for="update-consumer-city-municipality"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								City/Municipality
							</label>
							<input
								type="text"
								id="update-consumer-city-municipality"
								name="update-consumer-city-municipality"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="City/Municipality"
							/>
						</div>
						<!-- Barangay (Row 2, Column 1) -->
						<div>
							<label
								for="update-consumer-barangay"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Barangay
							</label>
							<input
								type="text"
								id="update-consumer-barangay"
								name="update-consumer-barangay"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="Barangay"
							/>
						</div>
						<!-- Street Address (Row 2, Columns 2-3) -->
						<div class="col-span-2">
							<label
								for="update-consumer-street"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								House or Building Number, Street Name
							</label>
							<input
								type="text"
								id="update-consumer-street"
								name="update-consumer-street"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="House/Building Number, Street Name"
							/>
						</div>
					</div>
					// Horizontal dashed-line
					<div class="w-full border-t border-dashed border-gray-300"></div>
					// Contact Info Group
					<div class="grid grid-cols-3 gap-4 mb-8">
						<div>
							<label
								for="update-consumer-phone-number"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Phone Number
							</label>
							<input
								type="number"
								id="update-consumer-phone-number"
								name="update-consumer-phone-number"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								placeholder="Phone Number"
							/>
						</div>
					</div>
					// Horizontal Line
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					<div class="flex justify-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
									text-white font-medium rounded-lg 
									transition-all shadow-md hover:shadow-lg 
									focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							update Consumer Account
						</button>
					</div>
					<div id="update-consumer-form-response"></div>
				</form>
			</template>
		</div>
	} else if usecase =="delete" {
		<div class="space-y-6">
			<!-- Verification Form -->
			<form
				id="delete-consumer-verify-form"
				hx-post="/v1/employee/sysadmin/accounts/delete/delete-consumer-form/verify"
				hx-target="#delete-consumer-form-container"
				hx-swap="none"
				class="space-y-6"
			>
				<div class="grid grid-cols-6 gap-10 mb-8">
					<div class="col-span-3">
						<label for="verify-meter-no" class="block text-sm font-medium text-gray-700 mb-2">
							Enter Account Number to Delete
						</label>
						<input
							type="text"
							id="verify-delete-acc-no"
							name="acc-no"
							class="block w-full px-4 py-3 border border-gray-300 
									rounded-lg focus:ring-green-500 focus:border-green-500 
									placeholder-gray-400"
							placeholder="Acccount Number"
							required
						/>
					</div>
					<div class="col-span-3 flex items-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
								text-white font-medium rounded-lg 
								transition-all shadow-md hover:shadow-lg 
								focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							Verify Account Number
						</button>
					</div>
				</div>
			</form>
			<!-- Update Form Container (Initially hidden) -->
			<div id="delete-consumer-form-container"></div>
			<!-- Loading Overlay -->
			<div id="delete-consumer-loading-overlay" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="flex items-center space-x-3 bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<div class="animate-spin h-6 w-6 border-4 border-green-500 rounded-full border-t-transparent"></div>
					<span class="text-gray-700 font-medium">Verifying Meter...</span>
				</div>
			</div>
			<!-- Error Message -->
			<div id="delete-consumer-error-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-red-500 font-medium text-lg" id="error-text"></p>
				</div>
			</div>
			<!-- Success Message -->
			<div id="delete-consumer-success-message" class="hidden fixed inset-0 bg-white bg-opacity-75 z-50 flex items-center justify-center">
				<div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
					<p class="text-green-500 font-medium text-lg">✓ Meter account updated successfully!</p>
				</div>
			</div>
			<script>
				document.addEventListener('htmx:afterOnLoad', function(evt) {
					const loadingOverlay = document.getElementById('delete-consumer-loading-overlay');
					const errorMessage = document.getElementById('delete-consumer-error-message');
					
					// Always hide loading overlay first
					loadingOverlay.classList.add('hidden');

					// Handle verification response
					if (evt.detail.requestConfig && evt.detail.requestConfig.path.includes('/verify')) {
						if (evt.detail.successful) {
							const container  = document.getElementById('delete-consumer-form-container');
							const template   = document.getElementById('delete-consumer-form-template');
							const verifyForm = document.getElementById('delete-consumer-verify-form');
							const response   = JSON.parse(evt.detail.xhr.responseText);

							// Hide the verify form
							verifyForm.classList.add('hidden');

							// Populate and show the update form
							const clone = template.content.cloneNode(true);
							const form  = clone.querySelector('#delete-consumer-form');
							form.querySelector('#delete-consumer-acc-no').value = response.acctNum;
							form.querySelector('#delete-consumer-first-name').value = response.firstName;
							form.querySelector('#delete-consumer-middle-name').value = response.middleName;
							form.querySelector('#delete-consumer-last-name').value = response.lastName;
							form.querySelector('#delete-consumer-suffix-name').value = response.suffix;
							form.querySelector('#delete-consumer-birth-date').value = response.birthDate;
							form.querySelector('#delete-consumer-province').value = response.province;
							form.querySelector('#delete-consumer-postal-code').value = response.postalCode;
							form.querySelector('#delete-consumer-city-municipality').value = response.cityMun;
							form.querySelector('#delete-consumer-barangay').value = response.barangay;
							form.querySelector('#delete-consumer-street').value = response.street;
							form.querySelector('#delete-consumer-phone-number').value = response.phoneNum;
							

							container.appendChild(clone);

							// Re-scan new content
							htmx.process(container);

						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('delete-consumer-error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}

					// Handle update submission response
					if (evt.detail.elt.closest('form')?.id === 'delete-consumer-form') {
						if (evt.detail.successful) {
							document.getElementById('delete-consumer-success-message').classList.remove('hidden');
							setTimeout(() => {
								document.getElementById('delete-consumer-success-message').classList.add('hidden');

								// Reset the form and UI
								const container = document.getElementById('delete-consumer-form-container');
								const verifyForm = document.getElementById('delete-consumer-verify-form');
								

								// 1. Clear update form
								container.innerHTML = '';
								
								// 2. Show verify form again
								verifyForm.classList.remove('hidden');
								
								// 3. Reset verify form input
								document.getElementById('delete-verify-consumer-acc-no').value = '';
								
							}, 3000);
						} else {
							try {
								const response = JSON.parse(evt.detail.xhr.responseText);
								document.getElementById('delete-consumer-error-text').textContent = response.error;
								errorMessage.classList.remove('hidden');
								setTimeout(() => {
									errorMessage.classList.add('hidden');
								}, 3000);
							} catch (e) {
								console.error('Error parsing response:', e);
							}
						}
					}
				});

				document.addEventListener('htmx:beforeRequest', function(evt) {
					if (evt.detail.elt.closest('form')) {
						document.getElementById('delete-consumer-loading-overlay').classList.remove('hidden');
					}
				});

				// Additional safety check for overlay visibility
				document.addEventListener('htmx:afterSwap', function(evt) {
					if (evt.detail.target.id === 'delete-consumer-form-container' && 
						evt.detail.requestConfig.path.includes('verify')) {
						const loadingOverlay = document.getElementById('delete-consumer-loading-overlay');
						loadingOverlay.classList.add('hidden');
					}
				});
			</script>
			<!-- Delete Form Template -->
			<template id="delete-consumer-form-template">
				<form
					id="delete-consumer-form"
					hx-post="/v1/employee/sysadmin/accounts/delete/delete-consumer-form"
					hx-target="#delete-consumer-form-response"
					hx-swap="none"
					class="space-y-6"
				>
					// Horizontal line        
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					// Account Number group
					<div class="mb-8 grid grid-cols-4 gap-4">
						<!-- Account Number (Row 1, Column 1) -->
						<div class="col-span-2">
							<label
								for="delete-consumer-acc-no"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Account Number 
							</label>
							<input
								type="text"
								id="delete-consumer-acc-no"
								name="delete-consumer-acc-no"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Account Number (Optional)"
								readonly
							/>
						</div>
					</div>
					// Horizontal dashed-line
					<div class="w-full border-t border-dashed border-gray-300"></div>
					// Consumer Name group
					<div class="mb-8 grid grid-cols-4 gap-4">
						<!-- First Name (Row 1, Column 1) -->
						<div>
							<label
								for="delete-consumer-first-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								First Name 
							</label>
							<input
								type="text"
								id="delete-consumer-first-name"
								name="delete-consumer-first-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="First name"
								disable
							/>
						</div>
						<!-- Middle Name (Row 1, Column 2) -->
						<div>
							<label
								for="delete-consumer-middle-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Middle Name 
							</label>
							<input
								type="text"
								id="delete-consumer-middle-name"
								name="delete-consumer-middle-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Middle name"
								disable
							/>
						</div>
						<!-- Last Name (Row 1, Column 3) -->
						<div>
							<label
								for="delete-consumer-last-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Last Name 
							</label>
							<input
								type="text"
								id="delete-consumer-last-name"
								name="delete-consumer-last-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Last name"
								disable
							/>
						</div>
						<!-- Suffix (Row 1, Column 4) -->
						<div>
							<label
								for="delete-consumer-suffix-name"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Suffix 
							</label>
							<input
								type="text"
								id="delete-consumer-suffix-name"
								name="delete-consumer-suffix-name"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								placeholder="Suffix (optional)"
								disable
							/>
						</div>
						<!-- Birth Date (Row 1, Column 5) -->
						<div>
							<label
								for="delete-consumer-birth-date"
								class="mb-2 block text-sm font-medium text-gray-700"
							>
								Birth Date 
							</label>
							<input
								type="date"
								id="delete-consumer-birth-date"
								name="delete-consumer-birth-date"
								class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"
								disable
							/>
						</div>
					</div>
					// Horizontal dashed-line
					<div class="w-full border-t border-dashed border-gray-300"></div>
					// Consumer Address group
					<div class="grid grid-cols-3 gap-4 mb-8">
						<!-- Province (Row 1, Column 1) -->
						<div>
							<label
								for="delete-consumer-province"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Province
							</label>
							<input
								type="text"
								id="delete-consumer-province"
								name="delete-consumer-province"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="Province"
								disable
							/>
						</div>
						<!-- Postal Code (Row 1, Column 2) -->
						<div>
							<label
								for="delete-consumer-postal-code"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Postal Code
							</label>
							<input
								type="number"
								id="delete-consumer-postal-code"
								name="delete-consumer-postal-code"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								placeholder="Postal Code"
								disable
							/>
						</div>
						<!-- Municipality (Row 1, Column 3) -->
						<div>
							<label
								for="delete-consumer-city-municipality"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								City/Municipality
							</label>
							<input
								type="text"
								id="delete-consumer-city-municipality"
								name="delete-consumer-city-municipality"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="City/Municipality"
								disable
							/>
						</div>
						<!-- Barangay (Row 2, Column 1) -->
						<div>
							<label
								for="delete-consumer-barangay"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Barangay
							</label>
							<input
								type="text"
								id="delete-consumer-barangay"
								name="delete-consumer-barangay"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="Barangay"
								disable
							/>
						</div>
						<!-- Street Address (Row 2, Columns 2-3) -->
						<div class="col-span-2">
							<label
								for="delete-consumer-street"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								House or Building Number, Street Name
							</label>
							<input
								type="text"
								id="delete-consumer-street"
								name="delete-consumer-street"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm"
								placeholder="House/Building Number, Street Name"
								disable
							/>
						</div>
					</div>
					// Horizontal dashed-line
					<div class="w-full border-t border-dashed border-gray-300"></div>
					// Contact Info Group
					<div class="grid grid-cols-3 gap-4 mb-8">
						<div>
							<label
								for="delete-consumer-phone-number"
								class="block text-sm font-medium text-gray-700 mb-2"
							>
								Phone Number
							</label>
							<input
								type="number"
								id="delete-consumer-phone-number"
								name="delete-consumer-phone-number"
								class="block w-full px-4 py-3 border border-gray-300 
										rounded-lg focus:ring-green-500 focus:border-green-500 
										placeholder-gray-400 placeholder:text-sm
										[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
								placeholder="Phone Number"
								disable
							/>
						</div>
					</div>
					// Horizontal Line
					<div class="w-full h-px bg-gray-300 mb-4"></div>
					<div class="flex justify-end">
						<button
							type="submit"
							class="px-6 py-3 bg-green-600 hover:bg-green-700 
									text-white font-medium rounded-lg 
									transition-all shadow-md hover:shadow-lg 
									focus:outline-none focus:ring-2 focus:ring-green-500"
						>
							Delete Consumer Account
						</button>
					</div>
					<div id="delete-consumer-form-response"></div>
				</form>
			</template>
		</div>
	}
}

templ NewEmployeeAccountForm() {
	<form
		hx-post="/admin/accounts/meter"
		hx-target="#form-response"
		hx-swap="innerHTML"
		class="space-y-6"
	>
		// Horizontal line        
		<div class="w-full h-px bg-gray-300 mb-4"></div>
		// Account Number group
		<div class="mb-8 grid grid-cols-4 gap-4">
			<!-- Account Number (Row 1, Column 1) -->
			<div class="col-span-2">
				<label for="consumer-first-name" class="mb-2 block text-sm font-medium text-gray-700">Account Number </label>
				<input type="text" id="consumer-first-name" class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500" placeholder="Account Number (Optional)"/>
			</div>
		</div>
		// Horizontal dashed-line
		<div class="w-full border-t border-dashed border-gray-300"></div>
		// Consumer Name group
		<div class="mb-8 grid grid-cols-4 gap-4">
			<!-- First Name (Row 1, Column 1) -->
			<div>
				<label for="consumer-first-name" class="mb-2 block text-sm font-medium text-gray-700">First Name </label>
				<input type="text" id="consumer-first-name" class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500" placeholder="First name"/>
			</div>
			<!-- Middle Name (Row 1, Column 2) -->
			<div>
				<label for="consumer-middle-name" class="mb-2 block text-sm font-medium text-gray-700">Middle Name </label>
				<input type="text" id="consumer-middle-name" class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500" placeholder="Middle name"/>
			</div>
			<!-- Last Name (Row 1, Column 3) -->
			<div>
				<label for="consumer-last-name" class="mb-2 block text-sm font-medium text-gray-700">Last Name </label>
				<input type="text" id="consumer-last-name" class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500" placeholder="Last name"/>
			</div>
			<!-- Suffix (Row 1, Column 4) -->
			<div>
				<label for="consumer-suffix-name" class="mb-2 block text-sm font-medium text-gray-700">Suffix </label>
				<input type="text" id="consumer-suffix-name" class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500" placeholder="Suffix (optional)"/>
			</div>
			<!-- Birth Date (Row 1, Column 5) -->
			<div>
				<label for="consumer-birth-date" class="mb-2 block text-sm font-medium text-gray-700">Birth Date </label>
				<input type="date" id="consumer-birth-date" class="block w-full rounded-lg border border-gray-300 px-4 py-3 placeholder-gray-400 placeholder:text-sm focus:border-green-500 focus:ring-green-500"/>
			</div>
		</div>
		// Horizontal dashed-line
		<div class="w-full border-t border-dashed border-gray-300"></div>
		// Consumer Address group
		<div class="grid grid-cols-3 gap-4 mb-8">
			<!-- Province (Row 1, Column 1) -->
			<div>
				<label for="consumer-province" class="block text-sm font-medium text-gray-700 mb-2">
					Province
				</label>
				<input
					type="text"
					id="consumer-province"
					class="block w-full px-4 py-3 border border-gray-300 
                            rounded-lg focus:ring-green-500 focus:border-green-500 
                            placeholder-gray-400 placeholder:text-sm"
					placeholder="Province"
				/>
			</div>
			<!-- Postal Code (Row 1, Column 2) -->
			<div>
				<label for="consumer-postal-code" class="block text-sm font-medium text-gray-700 mb-2">
					Postal Code
				</label>
				<input
					type="number"
					id="consumer-postal-code"
					class="block w-full px-4 py-3 border border-gray-300 
                            rounded-lg focus:ring-green-500 focus:border-green-500 
                            placeholder-gray-400 placeholder:text-sm
                            [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
					placeholder="Postal Code"
				/>
			</div>
			<!-- Municipality (Row 1, Column 3) -->
			<div>
				<label for="consumer-city-municipality" class="block text-sm font-medium text-gray-700 mb-2">
					City/Municipality
				</label>
				<input
					type="text"
					id="consumer-city-municipality"
					class="block w-full px-4 py-3 border border-gray-300 
                            rounded-lg focus:ring-green-500 focus:border-green-500 
                            placeholder-gray-400 placeholder:text-sm"
					placeholder="City/Municipality"
				/>
			</div>
			<!-- Barangay (Row 2, Column 1) -->
			<div>
				<label for="consumer-barangay" class="block text-sm font-medium text-gray-700 mb-2">
					Barangay
				</label>
				<input
					type="text"
					id="consumer-barangay"
					class="block w-full px-4 py-3 border border-gray-300 
                            rounded-lg focus:ring-green-500 focus:border-green-500 
                            placeholder-gray-400 placeholder:text-sm"
					placeholder="Barangay"
				/>
			</div>
			<!-- Street Address (Row 2, Columns 2-3) -->
			<div class="col-span-2">
				<label for="consumer-street" class="block text-sm font-medium text-gray-700 mb-2">
					House or Building Number, Street Name
				</label>
				<input
					type="text"
					id="consumer-street"
					class="block w-full px-4 py-3 border border-gray-300 
                            rounded-lg focus:ring-green-500 focus:border-green-500 
                            placeholder-gray-400 placeholder:text-sm"
					placeholder="House/Building Number, Street Name"
				/>
			</div>
		</div>
		// Horizontal dashed-line
		<div class="w-full border-t border-dashed border-gray-300"></div>
		// Contact Info and Account Type Group
		<div class="grid grid-cols-3 gap-4 mb-8">
			<!-- Phone Number (Row 1, Columns 1) -->
			<div>
				<label for="consumer-phone-number" class="block text-sm font-medium text-gray-700 mb-2">
					Phone Number
				</label>
				<input
					type="number"
					id="consumer-phone-number"
					class="block w-full px-4 py-3 border border-gray-300 
                            rounded-lg focus:ring-green-500 focus:border-green-500 
                            placeholder-gray-400 placeholder:text-sm
                            [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
					placeholder="Phone Number"
				/>
			</div>
			<!-- Account Type (Row 1, Columns 2) -->
			<div>
				<label for="consumer-account-type" class="block text-sm font-medium text-gray-700 mb-2">
					Account Type
				</label>
				<select
					id="consumer-account-type"
					class="block w-full px-4 py-3 border border-gray-300 
                            rounded-lg focus:ring-green-500 focus:border-green-500 
                            text-gray-700 placeholder-gray-400 placeholder:text-sm"
				>
					<option value="" disabled selected hidden class="text-gray-400">Account Type</option>
					<option value="cashier">Cashier</option>
					<option value="field-admin">Field Admin</option>
					<option value="finance-admin">Finance Admin</option>
					<option value="hr-admin">HR Admin</option>
					<option value="customer-admin">Customer Admin</option>
				</select>
			</div>
		</div>
		// Horizontal Line
		<div class="w-full h-px bg-gray-300 mb-4"></div>
		<div class="flex justify-end">
			<button
				type="submit"
				class="px-6 py-3 bg-green-600 hover:bg-green-700 
                        text-white font-medium rounded-lg 
                        transition-all shadow-md hover:shadow-lg 
                        focus:outline-none focus:ring-2 focus:ring-green-500"
			>
				Create Employee Account
			</button>
		</div>
		<div id="form-response"></div>
	</form>
}

//<-------------------------------------------------->//

// *<---------------- Consumer Section ---------------->*//
type ConsumerList struct {
	ConsumerID   string
	ConsumerName string
	ConsumerType string
	Status       string
}

var ConsumerAccountTypeData = struct {
	Residential string
	Commercial  string
	Industrial  string
}{
	Residential: "residential",
	Commercial:  "commercial",
	Industrial:  "industrial",
}

var ConsumerAccountStatusData = struct {
	Active   string
	Inactive string
}{
	Active:   "active",
	Inactive: "inactive",
}

// var AccountType = struct {
//     Cashier string
//     FieldAdmin string
//     FinanceAdmin string
//     HRAdmin string
//     CustomerAdmin string
// }{
//     Cashier: "cashier",
//     FieldAdmin: "field-admin",
//     FinanceAdmin: "finance-admin",
//     HRAdmin: "hr-admin",
//     CustomerAdmin: "customer-admin",
// }
templ SystemAdminEmployeeConsumerWebPage(consumerlist []ConsumerList) {
	@SystemAdminEmployeeBaseWebPage() {
		<div class=" p-6">
			<div class="bg-white rounded-lg shadow-md p-2">
				<div>
					<div class="text-2xl font-semibold text-gray-800 m-4 text-left">Consumers</div>
					<form>
						<div class="max-w-lg mx-auto mb-10">
							<div class="relative w-full">
								<div class="relative w-full">
									<input
										type="search"
										class="block p-2.5 w-full z-20 text-sm text-gray-800 rounded-lg
                                            border-s-gray-200 border-s-2 border bg-gray-50
                                            border-gray-300 focus:ring-gray-300 focus:border-gray-300"
										placeholder="Search Consumers"
										required
									/>
									<button
										type="submit"
										class="absolute top-0 end-0
                                             p-2.5 text-sm font-medium h-full 
                                                text-white bg-green-600 hover:bg-green-700 rounded-e-lg
                                                border border-green-700 focus:ring-4 focus:outline-none
                                                focus:ring-green-300"
									>
										<svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
											<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"></path>
										</svg>
										<span class="sr-only">Search</span>
									</button>
								</div>
							</div>
						</div>
						<div id="consumer-info-container" class="bg-gray-50 rounded-lg items-center text-center justify-center h-auto p-1 m-0.5">
							<!-- Consumer Information Container -->
							@ConsumerListContainer(consumerlist)
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}

templ ConsumerListContainer(consumerlist []ConsumerList) {
	for _, item := range consumerlist {
		<button
			hx-get="consumer/consumer-info"
			hx-target="#consumer-info-container"
			hx-swap="innerHTML"
			class="flex items-center w-full shadow-sm p-2 rounded-lg bg-white mb-2
                    hover:bg-slate-200 transition-all duration-200 ease-in-out
                    focus:outline-none focus:ring-2 focus:ring-gray-500"
		>
			<div
				if item.Status == ConsumerAccountStatusData.Active {
					class="bg-green-500 rounded-lg p-2 h-5 w-5 mr-4 shrink-0"
				} else {
					class="bg-red-500 rounded-lg p-2 h-5 w-5 mr-4 shrink-0"
				}
			></div>
			<div class="flex flex-1 gap-4">
				<div class="flex-1 text-left font-medium truncate">{ item.ConsumerID }</div>
				<div class="flex-1 text-left truncate">{ item.ConsumerName }</div>
				<div class="flex-1 text-left truncate">{ item.ConsumerType }</div>
			</div>
		</button>
	}
}

templ ConsumerInformationContainer() {
	<div class="m-2">
		<div class="flex space-x-5 place-items-center">
			<button
				hx-get="consumer/consumer-list"
				hx-target="#consumer-info-container"
				hx-swap="innerHTML"
				class="text-5xl pb-1
                           hover:text-green-500 transition-all"
			>
				&larr;
			</button>
			<p class="text-2xl">Consumer Information</p>
		</div>
		<!-- Consumer Information -->
		<div class="flex flex-col items-center justify-center w-full mx-auto">
			<!-- Consumer & Meter Info Table -->
			<div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden w-full mb-6">
				<div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
					<h3 class="text-lg font-semibold text-gray-700">Consumer & Meter Details</h3>
				</div>
				<div class="overflow-x-auto">
					<table class="w-full divide-y divide-gray-200">
						<tbody class="bg-white divide-y divide-gray-200">
							<!-- Consumer Info -->
							<tr>
								<td class="px-4 py-3 text-sm font-medium text-gray-900">Name</td>
								<td class="px-4 py-3 text-sm text-gray-600">John Doe</td>
								<td class="px-4 py-3 text-sm font-medium text-gray-900">Account Number</td>
								<td class="px-4 py-3 text-sm text-gray-600">123456789</td>
							</tr>
							<tr>
								<td class="px-4 py-3 text-sm font-medium text-gray-900">Address</td>
								<td colspan="3" class="px-4 py-3 text-sm text-gray-600">123 Main Street, Cityville, ST 12345</td>
							</tr>
							<tr>
								<td class="px-4 py-3 text-sm font-medium text-gray-900">Phone</td>
								<td class="px-4 py-3 text-sm text-gray-600">(555) 123-4567</td>
								<td class="px-4 py-3 text-sm font-medium text-gray-900">Email</td>
								<td class="px-4 py-3 text-sm text-gray-600">john.doe@example.com</td>
							</tr>
							<!-- Meter Section Header -->
							<tr>
								<td colspan="4" class="px-4 py-3 bg-gray-50 border-t border-gray-200">
									<span class="text-sm font-semibold text-gray-900">Meters</span>
								</td>
							</tr>
							<!-- Meter Table Headers -->
							<tr>
								<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Meter ID</th>
								<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Type</th>
								<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Location</th>
								<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
							</tr>
							<!-- Meter Rows -->
							<tr>
								<td class="px-4 py-3 text-sm text-gray-900">MTR-001</td>
								<td class="px-4 py-3 text-sm text-gray-600">Electric</td>
								<td class="px-4 py-3 text-sm text-gray-600">Main Building</td>
								<td class="px-4 py-3">
									<span class="px-2.5 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">Active</span>
								</td>
							</tr>
							<tr>
								<td class="px-4 py-3 text-sm text-gray-900">MTR-002</td>
								<td class="px-4 py-3 text-sm text-gray-600">Water</td>
								<td class="px-4 py-3 text-sm text-gray-600">Backyard</td>
								<td class="px-4 py-3">
									<span class="px-2.5 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">Inactive</span>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			<!-- Energy Chart -->
			<div id="energy-chart" class="w-full h-[100vh] min-h-[300px]"></div>
			<script>
                (function() {
                    var chartDom = document.getElementById('energy-chart');
                    var myChart = echarts.init(chartDom);
                
                    // Separate datasets for each chart
                    const data1 = [["2000-06-05",116],["2000-06-06",129],["2000-06-07",135],["2000-06-08",86],["2000-06-09",73],["2000-06-10",85],["2000-06-11",73],["2000-06-12",68],["2000-06-13",92],["2000-06-14",130],["2000-06-15",245],["2000-06-16",139],["2000-06-17",115],["2000-06-18",111],["2000-06-19",309],["2000-06-20",206],["2000-06-21",137],["2000-06-22",128],["2000-06-23",85],["2000-06-24",94],["2000-06-25",71],["2000-06-26",106],["2000-06-27",84],["2000-06-28",93],["2000-06-29",85],["2000-06-30",73],["2000-07-01",83],["2000-07-02",125],["2000-07-03",107],["2000-07-04",82],["2000-07-05",44],["2000-07-06",72],["2000-07-07",106],["2000-07-08",107],["2000-07-09",66],["2000-07-10",91],["2000-07-11",92],["2000-07-12",113],["2000-07-13",107],["2000-07-14",131],["2000-07-15",111],["2000-07-16",64],["2000-07-17",69],["2000-07-18",88],["2000-07-19",77],["2000-07-20",83],["2000-07-21",111],["2000-07-22",57],["2000-07-23",55],["2000-07-24",60]];
                    const data2 = [["2000-06-05",116],["2000-06-06",129],["2000-06-07",135],["2000-06-08",86],["2000-06-09",73],["2000-06-10",85],["2000-06-11",73],["2000-06-12",68],["2000-06-13",92],["2000-06-14",130],["2000-06-15",245],["2000-06-16",139],["2000-06-17",115],["2000-06-18",111],["2000-06-19",309],["2000-06-20",206],["2000-06-21",137],["2000-06-22",128],["2000-06-23",85],["2000-06-24",94],["2000-06-25",71],["2000-06-26",106],["2000-06-27",84],["2000-06-28",93],["2000-06-29",85],["2000-06-30",73],["2000-07-01",83],["2000-07-02",125],["2000-07-03",107],["2000-07-04",82],["2000-07-05",44],["2000-07-06",72],["2000-07-07",106],["2000-07-08",107],["2000-07-09",66],["2000-07-10",91],["2000-07-11",92],["2000-07-12",113],["2000-07-13",107],["2000-07-14",131],["2000-07-15",111],["2000-07-16",64],["2000-07-17",69],["2000-07-18",88],["2000-07-19",77],["2000-07-20",83],["2000-07-21",111],["2000-07-22",57],["2000-07-23",55],["2000-07-24",60]];
                
                    // Process datasets
                    const processData = (data) => {
                        const dates = data.map(item => item[0]);
                        const values = data.map(item => item[1]);
                        const maxValue = Math.max(...values);
                        return { dates, values, max: maxValue + (maxValue * 0.2) }; // 20% buffer
                    };
                
                    const chart1 = processData(data1);
                    const chart2 = processData(data2);
                
                    option = {
                        visualMap: [
                            { // Chart 1 Y-axis gradient
                                show: false,
                                type: 'continuous',
                                seriesIndex: 0,
                                min: 0,
                                max: chart1.max
                            },
                            { // Chart 2 X-axis gradient
                                show: false,
                                type: 'continuous',
                                seriesIndex: 1,
                                dimension: 0,
                                min: 0,
                                max: chart2.dates.length - 1
                            },
                            { // Chart 2 Y-axis gradient
                                show: false,
                                type: 'continuous',
                                seriesIndex: 1,
                                dimension: 1,
                                min: 0,
                                max: chart2.max
                            }
                        ],
                        title: [
                            { left: 'center', text: '30 Day Energy Consumption' },
                            { top: '50%', left: 'center', text: '24 Hour Energy Consumption' }
                        ],
                        tooltip: { trigger: 'axis' },
                        xAxis: [
                            { data: chart1.dates },
                            { data: chart2.dates, gridIndex: 1 }
                        ],
                        yAxis: [
                            { max: chart1.max },
                            { gridIndex: 1, max: chart2.max }
                        ],
                        grid: [
                            { bottom: '60%' },
                            { top: '60%' }
                        ],
                        series: [
                            {
                                type: 'line',
                                showSymbol: false,
                                data: chart1.values
                            },
                            {
                                type: 'line',
                                showSymbol: false,
                                data: chart2.values,
                                xAxisIndex: 1,
                                yAxisIndex: 1
                            }
                        ]
                    };
                
                    try {
                        myChart.setOption(option);
                        
                        // Enhanced resize handler
                        const resizeHandler = () => {
                            myChart.resize({
                                width: 'auto',
                                height: 'auto'
                            });
                        };
                        
                        // Add event listeners
                        window.addEventListener('resize', resizeHandler);
                        
                        // Initial resize to ensure proper rendering
                        setTimeout(resizeHandler, 0);
                        
                        // Cleanup on script re-execution (optional)
                        window.onunload = () => {
                            window.removeEventListener('resize', resizeHandler);
                        };
                    } catch (error) {
                        console.error('Chart error:', error);
                    }

                })();
            </script>
			<!-- Live Updates Section -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6 mt-6 px-4">
				<!-- Last Updated Card -->
				<div class="flex items-center bg-green-50 rounded-lg border border-green-200 p-3 md:p-4 shadow-sm">
					<div class="flex-1 flex items-center gap-3">
						<span class="text-sm md:text-base text-green-700 font-medium">Last Updated:</span>
						<span id="last-updated" class="text-2xl md:text-3xl font-semibold text-green-900">0</span>
						<span class="text-sm text-green-600">minutes ago</span>
					</div>
				</div>
				<!-- Live Power Card -->
				<div class="flex items-center bg-blue-50 rounded-lg border border-blue-200 p-3 md:p-4 shadow-sm">
					<div class="flex-1 flex items-center gap-3">
						<span class="text-sm md:text-base text-blue-700 font-medium">Live Power:</span>
						<span id="live-power" class="text-2xl md:text-3xl font-semibold text-blue-900">0</span>
						<span class="text-sm text-blue-600">W</span>
					</div>
				</div>
				<!-- Total Energy Card -->
				<div class="flex items-center bg-purple-50 rounded-lg border border-purple-200 p-3 md:p-4 shadow-sm">
					<div class="flex-1 flex items-center gap-3">
						<span class="text-sm md:text-base text-purple-700 font-medium">Total Energy:</span>
						<span id="total-energy" class="text-2xl md:text-3xl font-semibold text-purple-900">0</span>
						<span class="text-sm text-purple-600">kWh</span>
					</div>
				</div>
				<script>
                    // Function to update live mtetrics
                    function updateMetrics({ minutes, power, energy }) {
                        document.querySelector('#last-updated').textContent = minutes;
                        document.querySelector('#live-power').textContent = power;
                        document.querySelector('#total-energy').textContent = energy;
                    }
                </script>
			</div>
			<!-- Balance Section -->
			<div class="mt-8 px-4">
				<!-- Balance Overview -->
				<div class="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6 mb-6">
					<div class="flex items-center bg-amber-50 rounded-lg border border-amber-200 p-3 md:p-4 shadow-sm">
						<div class="flex-1 flex items-center gap-3">
							<span class="text-sm md:text-base text-amber-700 font-medium">Account Balance:</span>
							<span class="text-2xl md:text-3xl font-semibold text-amber-900">$500.00</span>
						</div>
					</div>
					<div class="flex items-center bg-amber-50 rounded-lg border border-amber-200 p-3 md:p-4 shadow-sm">
						<div class="flex-1 flex items-center gap-3">
							<span class="text-sm md:text-base text-amber-700 font-medium">Due Balance:</span>
							<span class="text-2xl md:text-3xl font-semibold text-amber-900">$120.00</span>
						</div>
					</div>
					<div class="flex items-center bg-amber-50 rounded-lg border border-amber-200 p-3 md:p-4 shadow-sm">
						<div class="flex-1 flex items-center gap-3">
							<span class="text-sm md:text-base text-amber-700 font-medium">Last Payment:</span>
							<span class="text-lg font-semibold text-amber-900">2023-11-15</span>
						</div>
					</div>
				</div>
				<!-- Balance Breakdown Table -->
				<div class="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
					<div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
						<h3 class="text-lg font-semibold text-gray-700">Balance Breakdown</h3>
					</div>
					<div class="overflow-x-auto">
						<table class="w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Bill ID</th>
									<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Due Date</th>
									<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Amount Due</th>
									<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Months Overdue</th>
									<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Interest</th>
									<th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								<tr>
									<td class="px-4 py-3 text-sm text-gray-900 font-medium">#101</td>
									<td class="px-4 py-3 text-sm text-gray-600">2023-10-05</td>
									<td class="px-4 py-3 text-sm text-gray-900">$50.00</td>
									<td class="px-4 py-3 text-sm text-gray-600">3</td>
									<td class="px-4 py-3 text-sm text-red-600">$7.50</td>
									<td class="px-4 py-3">
										<span class="px-2.5 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-full">Delinquent</span>
									</td>
								</tr>
								<tr>
									<td class="px-4 py-3 text-sm text-gray-900 font-medium">#102</td>
									<td class="px-4 py-3 text-sm text-gray-600">2023-11-05</td>
									<td class="px-4 py-3 text-sm text-gray-900">$70.00</td>
									<td class="px-4 py-3 text-sm text-gray-600">2</td>
									<td class="px-4 py-3 text-sm text-yellow-600">$7.00</td>
									<td class="px-4 py-3">
										<span class="px-2.5 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">Overdue</span>
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
}

//<-------------------------------------------------->//

//<---------------- Accounting Section ---------------->//
templ SystemAdminEmployeeAccountingWebPage() {
	@SystemAdminEmployeeBaseWebPage() {
		<!DOCTYPE html>
		<html lang="en">
			<head>
				<meta charset="UTF-8"/>
				<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
				<title>Electricity Rates Management</title>
				<script src="https://cdn.tailwindcss.com"></script>
				<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
				<script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
				<style>
        .spinner {
            width: 24px;
            height: 24px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .sticky-header {
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .modal-content {
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .highlight-change {
            animation: highlight 2s ease;
        }
        
        @keyframes highlight {
            0% { background-color: #dcfce7; }
            100% { background-color: transparent; }
        }
        
        .non-editable {
            background-color: #f9fafb;
            color: #4b5563;
            font-weight: 600;
        }
        
        .date-input {
            background-color: #f8fafc;
            border: 1px solid #cbd5e1;
            border-radius: 0.375rem;
            padding: 0.5rem 0.75rem;
            font-size: 1rem;
            color: #334155;
        }
        
        .decimal-input {
            background-color: white;
            border: 1px solid #cbd5e1;
            border-radius: 0.375rem;
            padding: 0.5rem 0.75rem;
            text-align: right;
            width: 100%;
        }
        
        @media (min-width: 768px) {
            #modal-grid.erc-mode {
                grid-template-columns: 1fr !important;
            }
        }
        
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .spinner-lg {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #16a34a;
            animation: spin 1s linear infinite;
        }
    </style>
			</head>
			<body class="bg-primary-50 min-h-screen">
				<div id="loading-overlay" class="loading-overlay">
					<div class="spinner-lg"></div>
				</div>
				<div class="container mx-auto px-4 py-8 max-w-6xl">
					<!-- Header -->
					<div class="mb-8 text-center">
						<h1 class="text-4xl font-bold text-primary-800">
							<i class="fas fa-bolt mr-3 text-yellow-500"></i>
							Electricity Rates Management
						</h1>
						<p class="text-primary-600 mt-2">Manage rates, ERC values, and overdue interest</p>
					</div>
					<!-- Overdue Interest Section -->
					<div class="bg-white rounded-xl shadow-md p-6 mb-8 border border-primary-200">
						<div class="flex justify-between items-center">
							<div>
								<h2 class="text-xl font-semibold text-primary-800">Overdue Interest</h2>
								<p class="text-gray-600 mt-1">Current overdue interest rate applied to late payments</p>
							</div>
							<div class="flex items-center">
								<div class="bg-primary-100 rounded-lg px-6 py-4 mr-4">
									<span id="overdue-interest-value" class="text-3xl font-bold text-primary-700">Loading...</span>
								</div>
								<button id="update-interest-btn" class="bg-amber-500 hover:bg-amber-600 text-white font-medium py-2 px-4 rounded-lg flex items-center transition">
									<i class="fas fa-edit mr-2"></i> Update
								</button>
							</div>
						</div>
					</div>
					<!-- Billing Info -->
					<div class="bg-white rounded-xl shadow-md p-6 mb-8 border border-primary-200 flex justify-between items-center">
						<div>
							<h2 class="text-xl font-semibold text-primary-800">Current Billing Period</h2>
							<p class="text-gray-600 mt-1">Effective date for the current rates</p>
						</div>
						<div class="bg-primary-100 rounded-lg px-6 py-4">
							<span id="billing-date-value" class="text-2xl font-bold text-primary-700">Loading...</span>
						</div>
					</div>
					<!-- Update Controls -->
					<div class="flex justify-between items-center mb-6">
						<h2 class="text-2xl font-bold text-primary-800">Residential Rates</h2>
						<div class="flex space-x-3">
							<button id="update-rates-btn" class="bg-primary-600 hover:bg-primary-700 text-white font-medium py-2 px-4 rounded-lg flex items-center transition">
								<i class="fas fa-sync-alt mr-2"></i> Update Rates
							</button>
							<button id="update-erc-btn" class="bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-2 px-4 rounded-lg flex items-center transition">
								<i class="fas fa-file-invoice mr-2"></i> Update ERC
							</button>
						</div>
					</div>
					<!-- Rates Table -->
					<div class="bg-white rounded-xl shadow-md overflow-hidden mb-12">
						<div class="overflow-x-auto">
							<table class="w-full">
								<thead>
									<tr class="bg-primary-700 text-white sticky-header">
										<th class="text-left py-4 px-6 font-semibold w-1/2">PARTICULARS</th>
										<th class="text-left py-4 px-6 font-semibold">UNIT</th>
										<th class="text-right py-4 px-6 font-semibold">RATES</th>
										<th class="text-right py-4 px-6 font-semibold">ERC</th>
									</tr>
								</thead>
								<tbody id="rates-table-body" class="divide-y divide-gray-100">
									<tr>
										<td colspan="4" class="text-center py-8">
											<div class="flex justify-center">
												<div class="spinner-lg"></div>
											</div>
										</td>
									</tr>
								</tbody>
							</table>
						</div>
					</div>
					<!-- Footer -->
					<div class="text-center text-primary-600 mt-12 pt-6 border-t border-primary-200">
						<p>Electricity Rates Management System © 2023</p>
					</div>
				</div>
				<!-- Update Rates/ERC Modal -->
				<div id="update-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
					<div class="bg-white rounded-xl shadow-xl w-full max-w-4xl modal-content">
						<div class="p-6 border-b border-gray-200">
							<div class="flex justify-between items-center">
								<h3 id="modal-title" class="text-2xl font-bold text-primary-800">Update Rates</h3>
								<button id="close-modal" class="text-gray-500 hover:text-gray-700">
									<i class="fas fa-times text-xl"></i>
								</button>
							</div>
							<p id="modal-description" class="text-gray-600 mt-2">Edit individual rates. Category totals are calculated automatically.</p>
						</div>
						<div class="p-6">
							<!-- Date and Type Selection -->
							<div id="modal-grid" class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
								<div id="date-input-container">
									<label class="block text-gray-700 text-sm font-bold mb-2" for="billing-date-input">
										Billing Effective Date
									</label>
									<input
										id="billing-date-input"
										type="date"
										class="date-input w-full p-3 border border-gray-300 rounded-lg"
									/>
								</div>
								<div>
									<label class="block text-gray-700 text-sm font-bold mb-2" for="rate-type-select">
										Rate Type
									</label>
									<select id="rate-type-select" class="date-input w-full p-3 border border-gray-300 rounded-lg">
										<option value="RESIDENTIAL">Residential</option>
										<option value="COMMERCIAL">Commercial</option>
										<option value="INDUSTRIAL">Industrial</option>
									</select>
								</div>
							</div>
							<!-- Rates Table -->
							<div class="overflow-x-auto">
								<table class="w-full">
									<thead>
										<tr class="bg-primary-100">
											<th class="text-left py-3 px-4 font-semibold w-1/2">PARTICULARS</th>
											<th class="text-left py-3 px-4 font-semibold">UNIT</th>
											<th id="modal-value-header" class="text-right py-3 px-4 font-semibold">RATES</th>
										</tr>
									</thead>
									<tbody id="modal-table-body" class="divide-y divide-gray-100">
										<!-- Modal table content will be populated by JavaScript -->
									</tbody>
								</table>
							</div>
						</div>
						<div class="p-6 bg-gray-50 rounded-b-xl flex justify-end space-x-3">
							<button id="cancel-modal" class="px-6 py-2 text-gray-700 font-medium rounded-lg border border-gray-300 hover:bg-gray-100">
								Cancel
							</button>
							<button id="submit-modal" class="bg-primary-600 hover:bg-primary-700 text-white font-medium py-2 px-6 rounded-lg flex items-center">
								<span id="submit-text">Update Rates</span>
								<span id="submit-spinner" class="spinner ml-2 hidden"></span>
							</button>
						</div>
					</div>
				</div>
				<!-- Update Interest Modal -->
				<div id="interest-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
					<div class="bg-white rounded-xl shadow-xl w-full max-w-md">
						<div class="p-6 border-b border-gray-200">
							<div class="flex justify-between items-center">
								<h3 class="text-2xl font-bold text-primary-800">Update Overdue Interest</h3>
								<button id="close-interest-modal" class="text-gray-500 hover:text-gray-700">
									<i class="fas fa-times text-xl"></i>
								</button>
							</div>
						</div>
						<div class="p-6">
							<div class="mb-6">
								<label class="block text-gray-700 text-sm font-bold mb-2" for="interest-input">
									New Overdue Interest Rate
								</label>
								<div class="relative">
									<input
										id="interest-input"
										type="number"
										step="0.0001"
										min="0"
										max="100"
										class="w-full py-3 px-4 pr-12 border border-gray-300 rounded-lg text-xl text-right focus:outline-none focus:ring-2 focus:ring-primary-500"
									/>
									<span class="absolute inset-y-0 right-0 flex items-center pr-4 pointer-events-none text-gray-500 text-xl">
										%
									</span>
								</div>
								<p class="text-gray-500 text-sm mt-2">Enter the new percentage value for overdue interest</p>
							</div>
						</div>
						<div class="p-6 bg-gray-50 rounded-b-xl flex justify-end space-x-3">
							<button id="cancel-interest-modal" class="px-6 py-2 text-gray-700 font-medium rounded-lg border border-gray-300 hover:bg-gray-100">
								Cancel
							</button>
							<button id="submit-interest-modal" class="bg-amber-500 hover:bg-amber-600 text-white font-medium py-2 px-6 rounded-lg flex items-center">
								<span id="submit-interest-text">Update Interest</span>
								<span id="submit-interest-spinner" class="spinner ml-2 hidden"></span>
							</button>
						</div>
					</div>
				</div>
				<!-- Success Toast -->
				<div id="success-toast" class="fixed bottom-6 right-6 bg-green-600 text-white px-6 py-4 rounded-lg shadow-lg flex items-center transform translate-y-20 opacity-0 transition-all duration-300">
					<i class="fas fa-check-circle text-xl mr-3"></i>
					<span id="toast-message">Rates updated successfully!</span>
				</div>
				<!-- Error Toast -->
				<div id="error-toast" class="fixed bottom-6 right-6 bg-red-600 text-white px-6 py-4 rounded-lg shadow-lg flex items-center transform translate-y-20 opacity-0 transition-all duration-300">
					<i class="fas fa-exclamation-circle text-xl mr-3"></i>
					<span id="error-message">Error updating data!</span>
				</div>
				<script>
    // Global variable to store rates data
    let ratesData = null;
    
    // DOM Elements
    const ratesTableBody = document.getElementById('rates-table-body');
    const modalTableBody = document.getElementById('modal-table-body');
    const updateModal = document.getElementById('update-modal');
    const interestModal = document.getElementById('interest-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalDescription = document.getElementById('modal-description');
    const modalValueHeader = document.getElementById('modal-value-header');
    const updateRatesBtn = document.getElementById('update-rates-btn');
    const updateErcBtn = document.getElementById('update-erc-btn');
    const updateInterestBtn = document.getElementById('update-interest-btn');
    const closeModal = document.getElementById('close-modal');
    const cancelModal = document.getElementById('cancel-modal');
    const submitModal = document.getElementById('submit-modal');
    const submitText = document.getElementById('submit-text');
    const submitSpinner = document.getElementById('submit-spinner');
    const closeInterestModal = document.getElementById('close-interest-modal');
    const cancelInterestModal = document.getElementById('cancel-interest-modal');
    const submitInterestModal = document.getElementById('submit-interest-modal');
    const submitInterestText = document.getElementById('submit-interest-text');
    const submitInterestSpinner = document.getElementById('submit-interest-spinner');
    const interestInput = document.getElementById('interest-input');
    const overdueInterestValue = document.getElementById('overdue-interest-value');
    const billingDateValue = document.getElementById('billing-date-value');
    const billingDateInput = document.getElementById('billing-date-input');
    const rateTypeSelect = document.getElementById('rate-type-select');
    const successToast = document.getElementById('success-toast');
    const toastMessage = document.getElementById('toast-message');
    const errorToast = document.getElementById('error-toast');
    const errorMessage = document.getElementById('error-message');
    const loadingOverlay = document.getElementById('loading-overlay');
    let currentEditType = 'rate';
    let currentCategoryMap = new Map();

    // Format numbers with commas and 4 decimal places
    function formatNumber(num) {
        if (num === '' || num === null || num === undefined || isNaN(num)) {
            return '0.0000';
        }
        const number = parseFloat(num);
        return number.toLocaleString('en-US', {
            minimumFractionDigits: 4,
            maximumFractionDigits: 4
        });
    }

    // Format percentage with 2 decimal places
    function formatPercentage(num) {
        if (num === '' || num === null || num === undefined || isNaN(num)) {
            return '0.00%';
        }
        const number = parseFloat(num);
        return number.toLocaleString('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }) + '%';
    }

    // Format date to display format
    function formatDateDisplay(dateString) {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        return new Date(dateString).toLocaleDateString('en-US', options);
    }

    // Format input value to 4 decimal places
    function formatInputValue(value) {
        if (value === null || value === undefined) {
            return '';
        }
        const num = parseFloat(value);
        return isNaN(num) ? '' : num.toFixed(4);
    }

    // Round number to 4 decimal places
    function roundToFourDecimals(num) {
        return Math.round(num * 10000) / 10000;
    }

    // Show loading state
    function showLoading() {
        loadingOverlay.style.display = 'flex';
    }

    // Hide loading state
    function hideLoading() {
        loadingOverlay.style.display = 'none';
    }

    // Create zeroed rates data structure
    function createZeroedRatesData() {
        return {
            billingDate: new Date().toISOString().split('T')[0],
            type: "RESIDENTIAL",
            overdueInterest: 0,
            sections: [
                {
                    id: "header-residential",
                    type: "main-header",
                    name: "RESIDENTIAL",
                    rate: "",
                    erc: 0
                },
                {
                    id: "cat-gen",
                    type: "category",
                    name: "Generation Charges",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-gen1", name: "Generation Energy Charge", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-gen2", name: "Other Generation Rate Adjustment", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-trans",
                    type: "category",
                    name: "Transmission Charges (NGCP)",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-trans1", name: "Transmission Demand Charge", unit: "PhP/kW", rate: 0, erc: 0 },
                        { id: "item-trans2", name: "Transmission System Charge", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-sysloss",
                    type: "category",
                    name: "System Loss Charge",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-sysloss1", name: "System Loss Charge", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-dist",
                    type: "category",
                    name: "Distribution Charges",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-dist1", name: "Distribution Demand Charge", unit: "PhP/kW", rate: 0, erc: 0 },
                        { id: "item-dist2", name: "Distribution System Charge", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-supply",
                    type: "category",
                    name: "Supply Charges",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-supply1", name: "Supply Retail Customer Charge", unit: "PhP/Cust/Mo", rate: 0, erc: 0 },
                        { id: "item-supply2", name: "Supply System Charge", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-meter",
                    type: "category",
                    name: "Metering Charges",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-meter1", name: "Metering Retail Customer Charge", unit: "PhP/Cust/Mo", rate: 0, erc: 0 },
                        { id: "item-meter2", name: "Metering System Charge", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-reinvest",
                    type: "category",
                    name: "Reinvestment Fund/MCC",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-reinvest1", name: "Reinvestment Fund/MCC", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-other",
                    type: "category",
                    name: "Other Charges",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-other1", name: "Lifeline Subsidy Charge", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-other2", name: "Sr. Citizen Subsidy Charge", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-other3", name: "Lifeline Discount (0-15 kWh)", unit: "", rate: 0, erc: 0 },
                        { id: "item-other4", name: "Lifeline Discount (16-35 kWh)", unit: "", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-franchise",
                    type: "category",
                    name: "Franchise Tax",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-franchise1", name: "Franchise Tax", unit: "", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-business",
                    type: "category",
                    name: "Business Tax",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-business1", name: "Business Tax - Balayan", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-business2", name: "Business Tax - Calaca", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-business3", name: "Business Tax - Calatagan", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-business4", name: "Business Tax - Lemery", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-business5", name: "Business Tax - Nasugbu", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-business6", name: "Business Tax - Tuy", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-property",
                    type: "category",
                    name: "Real Property Tax",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-property1", name: "Real Property Tax - Calaca", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-property2", name: "Real Property Tax - Balayan", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-property3", name: "Real Property Tax - Lemery", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-property4", name: "Real Property Tax - Nasugbu", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-property5", name: "Real Property Tax - Taal", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-property6", name: "Real Property Tax - Calatagan", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-vat",
                    type: "category",
                    name: "VAT",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-vat1", name: "Generation", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-vat2", name: "Transmission", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-vat3", name: "System Loss", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-vat4", name: "GRAM/ICERA/DAA VAT", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-vat5", name: "Distribution", unit: "%", rate: 0, erc: 0 },
                        { id: "item-vat6", name: "Others", unit: "%", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-universal",
                    type: "category",
                    name: "Universal Charge",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-universal1", name: "Missionary Electrification", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-universal2", name: "True-up (CY 2012)", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-universal3", name: "True-up (CY 2013)", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-universal4", name: "True-up (CY 2014)", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-universal5", name: "Environmental Charge", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-universal6", name: "NPC Stranded Contract Cost", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-universal7", name: "NPC Stranded Debts", unit: "PhP/kWh", rate: 0, erc: 0 },
                        { id: "item-universal8", name: "GRAM/ICERA/DAA", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "cat-fit",
                    type: "category",
                    name: "FIT - ALL",
                    rate: 0,
                    erc: 0,
                    items: [
                        { id: "item-fit1", name: "FIT-ALL Php/kWh", unit: "PhP/kWh", rate: 0, erc: 0 }
                    ]
                },
                {
                    id: "total-section",
                    type: "total",
                    name: "TOTAL RATE",
                    rate: 0,
                    erc: 0
                }
            ]
        };
    }

    // Fetch rates data from API
    async function fetchRatesData() {
        try {
            showLoading();
            const response = await fetch('/v1/employee/sysadmin/accounting/rates-data', {
                headers: {
                    'Authorization': 'Bearer YOUR_AUTH_TOKEN' // Add auth token if needed
                }
            });
            
            if (!response.ok) {
                // Check if response is 404 with "No data found" error
                if (response.status === 404) {
                    const errorData = await response.json();
                    if (errorData.error === "No data found") {
                        // Create zeroed rates data
                        ratesData = createZeroedRatesData();
                        console.log('No data found. Created zeroed rates data.');
                    } else {
                        throw new Error(`Server error: ${errorData.error || response.statusText}`);
                    }
                } else {
                    throw new Error(`Failed to fetch data: ${response.status} ${response.statusText}`);
                }
            } else {
                ratesData = await response.json();
                console.log('Rates data fetched:', ratesData);
            }
            
            // Update UI with fetched data
            overdueInterestValue.textContent = formatPercentage(ratesData.overdueInterest);
            billingDateValue.textContent = formatDateDisplay(ratesData.billingDate);
            
            // Render table and then hide loading
            renderRatesTable();
            
            // Add a small delay to ensure UI updates are completed
            setTimeout(hideLoading, 50);
        } catch (error) {
            console.error('Error fetching rates data:', error);
            
            // Create zeroed rates data as fallback
            ratesData = createZeroedRatesData();
            overdueInterestValue.textContent = formatPercentage(ratesData.overdueInterest);
            billingDateValue.textContent = formatDateDisplay(ratesData.billingDate);
            renderRatesTable();
            
            showErrorToast('Failed to load data. Using zero values.');
            setTimeout(hideLoading, 50);
        }
    }

    // Render the main rates table
    function renderRatesTable() {
        let html = '';
        ratesData.sections.forEach(section => {
            if (section.type === 'main-header') {
                html += `
                    <tr class="bg-primary-50">
                        <td colspan="4" class="py-3 px-6 font-bold text-primary-800 text-lg">${section.name}</td>
                    </tr>
                `;
            } else if (section.type === 'category') {
                // Category header
                html += `
                    <tr class="bg-gray-50">
                        <td class="py-2 px-6 font-semibold">${section.name}</td>
                        <td class="py-2 px-6"></td>
                        <td class="py-2 px-6 text-right font-semibold">${formatNumber(section.rate)}</td>
                        <td class="py-2 px-6 text-right font-semibold">${formatNumber(section.erc)}</td>
                    </tr>
                `;
                // Category items
                section.items.forEach(item => {
                    html += `
                        <tr>
                            <td class="py-2 px-6 pl-10">${item.name}</td>
                            <td class="py-2 px-6">${item.unit}</td>
                            <td class="py-2 px-6 text-right">${formatNumber(item.rate)}</td>
                            <td class="py-2 px-6 text-right">${formatNumber(item.erc)}</td>
                        </tr>
                    `;
                });
            } else if (section.type === 'total') {
                // Total row
                html += `
                    <tr class="bg-primary-100 border-t-2 border-primary-300">
                        <td class="py-3 px-6 font-bold text-lg">${section.name}</td>
                        <td class="py-3 px-6"></td>
                        <td class="py-3 px-6 text-right font-bold text-lg">${formatNumber(section.rate)}</td>
                        <td class="py-3 px-6 text-right font-bold text-lg">${formatNumber(section.erc)}</td>
                    </tr>
                `;
            }
        });
        ratesTableBody.innerHTML = html;
    }

    // Render the modal table for editing
    function renderModalTable(type) {
        let html = '';
        currentCategoryMap = new Map();
        // Set modal values
        billingDateInput.value = ratesData.billingDate;
        rateTypeSelect.value = ratesData.type;
        
        ratesData.sections.forEach((section, sectionIndex) => {
            if (section.type === 'main-header') {
                html += `
                    <tr class="bg-primary-50">
                        <td colspan="3" class="py-3 px-4 font-bold text-primary-800">${section.name}</td>
                    </tr>
                `;
            } else if (section.type === 'category') {
                currentCategoryMap.set(sectionIndex, {
                    name: section.name,
                    itemCount: section.items.length
                });
                html += `
                    <tr class="bg-gray-50 non-editable" data-category="${section.id}">
                        <td class="py-2 px-4 font-semibold">${section.name}</td>
                        <td class="py-2 px-4"></td>
                        <td class="py-2 px-4 text-right" id="category-total-${section.id}">
                            ${formatNumber(section[type])}
                        </td>
                    </tr>
                `;
                section.items.forEach((item, itemIndex) => {
                    html += `
                        <tr>
                            <td class="py-2 px-4 pl-8">${item.name}</td>
                            <td class="py-2 px-4">${item.unit}</td>
                            <td class="py-2 px-4">
                                <input type="number" step="0.0001" value="${formatInputValue(item[type])}" 
                                    class="decimal-input w-full py-1 px-2 focus:ring-2 focus:ring-primary-500"
                                    data-category="${section.id}" data-item="${item.id}">
                            </td>
                        </tr>
                    `;
                });
            } else if (section.type === 'total') {
                html += `
                    <tr class="bg-primary-100 border-t-2 border-primary-300 non-editable">
                        <td class="py-3 px-4 font-bold">${section.name}</td>
                        <td class="py-3 px-4"></td>
                        <td class="py-3 px-4 text-right font-bold" id="overall-total">
                            ${formatNumber(section[type])}
                        </td>
                    </tr>
                `;
            }
        });
        modalTableBody.innerHTML = html;
        const inputs = modalTableBody.querySelectorAll('input');
        inputs.forEach(input => input.addEventListener('input', recalcTotals));
    }

    // Recalculate category and overall totals
    function recalcTotals() {
        const type = currentEditType;
        let overallTotal = 0;
        currentCategoryMap.forEach((category, sectionIndex) => {
            let categoryTotal = 0;
            const inputs = modalTableBody.querySelectorAll(`input[data-category="${ratesData.sections[sectionIndex].id}"]`);
            inputs.forEach(input => {
                const value = parseFloat(input.value) || 0;
                categoryTotal += value;
            });
            categoryTotal = roundToFourDecimals(categoryTotal);
            document.getElementById(`category-total-${ratesData.sections[sectionIndex].id}`).textContent = formatNumber(categoryTotal);
            overallTotal += categoryTotal;
        });
        overallTotal = roundToFourDecimals(overallTotal);
        document.getElementById('overall-total').textContent = formatNumber(overallTotal);
    }

    // Show the update modal
    function showModal(type) {
        if (!ratesData) {
            showErrorToast('Rates data not loaded yet');
            return;
        }
        
        currentEditType = type;
        const modalGrid = document.getElementById('modal-grid');
        const dateInputContainer = document.getElementById('date-input-container');
        
        if (type === 'rate') {
            modalTitle.textContent = 'Update Rates';
            modalDescription.textContent = 'Edit individual rates. Category totals are calculated automatically.';
            modalValueHeader.textContent = 'RATES';
            submitText.textContent = 'Update Rates';
            modalGrid.classList.remove('erc-mode');
            dateInputContainer.style.display = 'block';
        } else {
            modalTitle.textContent = 'Update ERC';
            modalDescription.textContent = 'Edit individual ERC values. Category totals are calculated automatically.';
            modalValueHeader.textContent = 'ERC';
            submitText.textContent = 'Update ERC';
            modalGrid.classList.add('erc-mode');
            dateInputContainer.style.display = 'none';
        }
        renderModalTable(type);
        updateModal.classList.remove('hidden');
    }

    // Show the interest modal
    function showInterestModal() {
        if (!ratesData) {
            showErrorToast('Rates data not loaded yet');
            return;
        }
        interestInput.value = ratesData.overdueInterest;
        interestModal.classList.remove('hidden');
    }

    // Hide all modals
    function hideAllModals() {
        updateModal.classList.add('hidden');
        interestModal.classList.add('hidden');
    }

    // Show modal loading state
    function showModalLoading() {
        submitSpinner.classList.remove('hidden');
        submitText.textContent = 'Updating...';
        submitModal.disabled = true;
    }

    // Hide modal loading state
    function hideModalLoading() {
        submitSpinner.classList.add('hidden');
        submitText.textContent = currentEditType === 'rate' ? 'Update Rates' : 'Update ERC';
        submitModal.disabled = false;
    }

    // Show interest loading state
    function showInterestLoading() {
        submitInterestSpinner.classList.remove('hidden');
        submitInterestText.textContent = 'Updating...';
        submitInterestModal.disabled = true;
    }

    // Hide interest loading state
    function hideInterestLoading() {
        submitInterestSpinner.classList.add('hidden');
        submitInterestText.textContent = 'Update Interest';
        submitInterestModal.disabled = false;
    }

    // Show success toast
    function showToast(message) {
        toastMessage.textContent = message;
        successToast.classList.remove('translate-y-20', 'opacity-0');
        successToast.classList.add('translate-y-0', 'opacity-100');
        setTimeout(() => {
            successToast.classList.remove('translate-y-0', 'opacity-100');
            successToast.classList.add('translate-y-20', 'opacity-0');
        }, 3000);
    }

    // Show error toast
    function showErrorToast(message) {
        errorMessage.textContent = message;
        errorToast.classList.remove('translate-y-20', 'opacity-0');
        errorToast.classList.add('translate-y-0', 'opacity-100');
        setTimeout(() => {
            errorToast.classList.remove('translate-y-0', 'opacity-100');
            errorToast.classList.add('translate-y-20', 'opacity-0');
        }, 3000);
    }

    // Highlight the updated element
    function highlightElement(element) {
        element.classList.add('highlight-change');
        setTimeout(() => element.classList.remove('highlight-change'), 2000);
    }

    // Recalculate section totals after updates
    function recalcSectionTotals(sections, type) {
        const result = sections.map(section => {
            if (section.type === 'category') {
                let sum = 0;
                section.items.forEach(item => {
                    sum += item[type];
                });
                section[type] = roundToFourDecimals(sum);
            }
            return section;
        });

        let overallTotal = 0;
        result.forEach(section => {
            if (section.type === 'category') {
                overallTotal += section[type];
            }
        });

        const totalSection = result.find(s => s.type === 'total');
        if (totalSection) {
            totalSection[type] = roundToFourDecimals(overallTotal);
        }

        return result;
    }

    // Prepare data for API submission
    function prepareApiData(sections, type) {
        return sections.filter(section => section.type !== 'main-header').map(section => {
            if (section.type === 'category') {
                return {
                    id: section.id,
                    name: section.name,
                    rate: type === 'rate' ? section.rate : undefined,
                    erc: type === 'erc' ? section.erc : undefined,
                    items: section.items.map(item => ({
                        id: item.id,
                        name: item.name,
                        unit: item.unit,
                        rate: type === 'rate' ? roundToFourDecimals(item.rate) : undefined,
                        erc: type === 'erc' ? roundToFourDecimals(item.erc) : undefined
                    }))
                };
            } else if (section.type === 'total') {
                return {
                    id: section.id,
                    name: section.name,
                    rate: type === 'rate' ? section.rate : undefined,
                    erc: type === 'erc' ? section.erc : undefined
                };
            }
            return section;
        });
    }

    // Update rates data from server response
    function updateRatesFromServer(serverData) {
        ratesData.billingDate = serverData.date;
        ratesData.type = serverData.type;

        const serverSections = serverData.sections;
        const clientSections = ratesData.sections;

        for (let i = 0; i < serverSections.length; i++) {
            const serverSection = serverSections[i];
            const clientSectionIndex = i + 1; // Skip header
            if (clientSectionIndex >= clientSections.length) break;
            const clientSection = clientSections[clientSectionIndex];

            // Update section rates, default to 0 if not provided
            clientSection.rate = serverSection.rate !== undefined ? serverSection.rate : 0;

            // Update items if present
            if (serverSection.items && clientSection.items) {
                for (let j = 0; j < serverSection.items.length; j++) {
                    if (j < clientSection.items.length) {
                        const serverItem = serverSection.items[j];
                        clientSection.items[j].rate = serverItem.rate !== undefined ? serverItem.rate : 0;
                    }
                }
            }
            // Removed: clientSection.erc update to preserve existing ERC values
        }

        // Update total section
        const serverTotal = serverSections[serverSections.length - 1];
        const clientTotal = clientSections[clientSections.length - 1];
        clientTotal.rate = serverTotal.rate !== undefined ? serverTotal.rate : 0;

        // Update UI
        billingDateValue.textContent = formatDateDisplay(ratesData.billingDate);
        renderRatesTable();
    }

    // Update ERC data from server response
    function updateErcFromServer(serverData) {
        ratesData.type = serverData.type;

        const serverSections = serverData.sections;
        const clientSections = ratesData.sections;

        for (let i = 0; i < serverSections.length; i++) {
            const serverSection = serverSections[i];
            const clientSectionIndex = i + 1; // Skip header
            if (clientSectionIndex >= clientSections.length) break;
            const clientSection = clientSections[clientSectionIndex];

            // Update section ERC, default to 0 if not provided
            clientSection.erc = serverSection.erc !== undefined ? serverSection.erc : 0;

            // Update items if present
            if (serverSection.items && clientSection.items) {
                for (let j = 0; j < serverSection.items.length; j++) {
                    if (j < clientSection.items.length) {
                        const serverItem = serverSection.items[j];
                        clientSection.items[j].erc = serverItem.erc !== undefined ? serverItem.erc : 0;
                    }
                }
            }
            // Removed: clientSection.rate update to preserve existing rate values
        }

        // Update total section
        const serverTotal = serverSections[serverSections.length - 1];
        const clientTotal = clientSections[clientSections.length - 1];
        clientTotal.erc = serverTotal.erc !== undefined ? serverTotal.erc : 0;

        // Update UI
        renderRatesTable();
    }

    // API Submission Functions
    async function submitRatesData() {
        showModalLoading();
        try {
            const inputs = modalTableBody.querySelectorAll('input');
            const updatedSections = ratesData.sections.map(section => {
                if (section.type === 'category') {
                    const updatedItems = section.items.map(item => {
                        const input = Array.from(inputs).find(input => input.dataset.category === section.id && input.dataset.item === item.id);
                        const value = input ? roundToFourDecimals(parseFloat(input.value) || 0) : item.rate;
                        return { ...item, rate: value };
                    });
                    return { ...section, items: updatedItems };
                }
                return section;
            });

            const recalculatedSections = recalcSectionTotals(updatedSections, 'rate');
            const apiData = prepareApiData(recalculatedSections, 'rate');
            const payload = {
                type: "RATES",
                ratesData: {
                    date: billingDateInput.value,
                    rateType: rateTypeSelect.value,
                    sections: apiData
                }
            };

            const response = await fetch('/v1/employee/sysadmin/accounting/submit-update-rates-form', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer YOUR_AUTH_TOKEN'
                },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    updateRatesFromServer(result.data);
                    hideModalLoading();
                    hideAllModals();
                    showToast('Rates updated successfully!');
                } else {
                    throw new Error('Server returned success: false');
                }
            } else {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to update rates');
            }
        } catch (error) {
            console.error('Error submitting rates data:', error);
            hideModalLoading();
            showErrorToast(`Error: ${error.message}`);
        }
    }

    async function submitErcData() {
        showModalLoading();
        try {
            const inputs = modalTableBody.querySelectorAll('input');
            const updatedSections = ratesData.sections.map(section => {
                if (section.type === 'category') {
                    const updatedItems = section.items.map(item => {
                        const input = Array.from(inputs).find(input => input.dataset.category === section.id && input.dataset.item === item.id);
                        const value = input ? roundToFourDecimals(parseFloat(input.value) || 0) : item.erc;
                        return { ...item, erc: value };
                    });
                    return { ...section, items: updatedItems };
                }
                return section;
            });

            const recalculatedSections = recalcSectionTotals(updatedSections, 'erc');
            const apiData = prepareApiData(recalculatedSections, 'erc');
            const payload = {
                type: "ERC",
                ratesData: {
                    rateType: rateTypeSelect.value,
                    sections: apiData
                }
            };

            const response = await fetch('/v1/employee/sysadmin/accounting/submit-update-erc-form', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer YOUR_AUTH_TOKEN'
                },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    updateErcFromServer(result.data);
                    hideModalLoading();
                    hideAllModals();
                    showToast('ERC values updated successfully!');
                } else {
                    throw new Error('Server returned success: false');
                }
            } else {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to update ERC');
            }
        } catch (error) {
            console.error('Error submitting ERC data:', error);
            hideModalLoading();
            showErrorToast(`Error: ${error.message}`);
        }
    }

    async function submitInterestData() {
        showInterestLoading();
        try {
            let newInterest = parseFloat(interestInput.value);
            if (isNaN(newInterest)) {
                throw new Error('Please enter a valid number');
            }
            if (newInterest < 0 || newInterest > 100) {
                throw new Error('Interest rate must be between 0 and 100');
            }
            newInterest = Math.round(newInterest * 100) / 100;

            const payload = {
                type: "INTEREST",
                interestData: { overdueInterest: newInterest }
            };

            const response = await fetch('/v1/employee/sysadmin/accounting/submit-update-interest-form', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer YOUR_AUTH_TOKEN'
                },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const result = await response.json();
                ratesData.overdueInterest = newInterest;
                overdueInterestValue.textContent = formatPercentage(newInterest);
                highlightElement(overdueInterestValue.parentElement);
                hideInterestLoading();
                hideAllModals();
                showToast('Overdue interest updated successfully!');
            } else {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to update interest');
            }
        } catch (error) {
            console.error('Error submitting interest data:', error);
            hideInterestLoading();
            showErrorToast(`Error: ${error.message}`);
        }
    }

    // Event Listeners
    updateRatesBtn.addEventListener('click', () => showModal('rate'));
    updateErcBtn.addEventListener('click', () => showModal('erc'));
    updateInterestBtn.addEventListener('click', showInterestModal);
    closeModal.addEventListener('click', hideAllModals);
    cancelModal.addEventListener('click', hideAllModals);
    closeInterestModal.addEventListener('click', hideAllModals);
    cancelInterestModal.addEventListener('click', hideAllModals);
    submitModal.addEventListener('click', () => {
        if (currentEditType === 'rate') {
            submitRatesData();
        } else {
            submitErcData();
        }
    });
    submitInterestModal.addEventListener('click', submitInterestData);
    updateModal.addEventListener('click', (e) => {
        if (e.target === updateModal) hideAllModals();
    });
    interestModal.addEventListener('click', (e) => {
        if (e.target === interestModal) hideAllModals();
    });

    // Initialize the application
    document.addEventListener('DOMContentLoaded', () => {
        // Show loading state initially
        fetchRatesData();
    });
</script>
			</body>
		</html>
	}
}

templ Test_SystemAdminEmployeeAccountingTable() {
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
	<script>
	tailwind.config = {
		theme: {
			extend: {
				colors: {
					primary: {
						50: '#f0fdf4',
						100: '#dcfce7',
						200: '#bbf7d0',
						300: '#86efac',
						400: '#4ade80',
						500: '#22c55e',
						600: '#16a34a',
						700: '#15803d',
						800: '#166534',
						900: '#14532d',
					}
				}
			}
		}
	}
	</script>
	<style>
		@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
		
		body {
			font-family: 'Poppins', sans-serif;
			background: linear-gradient(135deg, #f0fdf4 0%, #e6f7ec 100%);
		}
		
		.card {
			box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
			transition: transform 0.3s ease, box-shadow 0.3s ease;
		}
		
		.card:hover {
			transform: translateY(-5px);
			box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
		}
		
		.header-gradient {
			background: linear-gradient(120deg, #14532d 0%, #22c55e 100%);
		}
		
		.category-row {
			background-color: #dcfce7;
			font-weight: 600;
			color: #14532d;
		}
		
		.subcategory-row td:first-child {
			padding-left: 2.5rem;
		}
		
		.total-row {
			background: linear-gradient(to right, #14532d, #22c55e);
			color: white;
			font-weight: 600;
		}
		
		.value-cell {
			font-family: 'Courier New', monospace;
			font-weight: 600;
		}
		
		.unit-cell {
			color: #6b7280;
		}
		
		.wave-divider {
			height: 30px;
			background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 120' preserveAspectRatio='none'%3E%3Cpath d='M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z' opacity='.25' fill='%2314532d'%3E%3C/path%3E%3Cpath d='M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z' opacity='.5' fill='%2322c55e'%3E%3C/path%3E%3Cpath d='M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z' fill='%23dcfce7'%3E%3C/path%3E%3C/svg%3E");
			background-size: 1200px 100%;
		}
		
		.stripe-row:nth-child(even) {
			background-color: #f0fdf4;
		}
	</style>
	<div class="min-h-screen flex items-center justify-center p-4 md:p-8">
		<div class="w-full max-w-4xl">
			<div class="card bg-white rounded-xl overflow-hidden">
				<!-- Header -->
				<div class="header-gradient py-8 px-6 md:px-10 relative">
					<div class="absolute top-0 left-0 w-full h-12 wave-divider"></div>
					<div class="flex flex-col md:flex-row md:items-center gap-6 relative z-10">
						<div class="bg-white w-16 h-16 rounded-xl flex items-center justify-center shadow-lg">
							<i class="fas fa-bolt text-3xl text-green-600"></i>
						</div>
						<div class="text-white">
							<h1 class="text-2xl md:text-3xl font-bold">Residential Electricity Rate Breakdown</h1>
							<div class="flex flex-wrap items-center gap-3 mt-3">
								<span class="bg-white/20 px-3 py-1 rounded-full text-sm flex items-center">
									<i class="fas fa-calendar-alt mr-2"></i>
									Billing Date: 01/01/01
								</span>
								<span class="bg-white/20 px-3 py-1 rounded-full text-sm flex items-center">
									<i class="fas fa-file-invoice-dollar mr-2"></i>
									ERC Approved Rates
								</span>
							</div>
						</div>
						<div class="md:ml-auto bg-white/20 backdrop-blur-sm rounded-xl p-3">
							<div class="text-center">
								<div class="text-xs text-white/80">TOTAL RATE</div>
								<div class="text-3xl font-bold text-white">9.9298</div>
								<div class="text-xs text-white/80 mt-1">PhP/kWh</div>
							</div>
						</div>
					</div>
				</div>
				<!-- Table -->
				<div class="overflow-x-auto">
					<table class="w-full">
						<thead>
							<tr class="bg-green-50">
								<th class="text-left py-4 px-6 text-green-800 font-semibold w-1/2">PARTICULARS</th>
								<th class="text-left py-4 px-6 text-green-800 font-semibold">UNIT</th>
								<th class="text-right py-4 px-6 text-green-800 font-semibold">RATES</th>
								<th class="text-right py-4 px-6 text-green-800 font-semibold">ERC</th>
							</tr>
						</thead>
						<tbody>
							<!-- Main Category -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-bold text-lg">RESIDENTIAL</td>
								<td class="py-3 px-6 text-right value-cell"></td>
								<td class="py-3 px-6 text-right value-cell">9.9298</td>
							</tr>
							<!-- Generation Charges -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Generation Charges</td>
								<td class="py-3 px-6 text-right value-cell">5.6092</td>
								<td class="py-3 px-6 text-right value-cell">5.6092</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Generation Energy Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">5.6092</td>
								<td class="py-3 px-6 text-right value-cell">5.6092</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Other Generation Rate Adjustment</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<!-- Transmission Charges -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Transmission Charges (NGCP)</td>
								<td class="py-3 px-6 text-right value-cell">0.6853</td>
								<td class="py-3 px-6 text-right value-cell">0.6853</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Transmission Demand Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kW</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Transmission System Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.6853</td>
								<td class="py-3 px-6 text-right value-cell">0.6853</td>
							</tr>
							<!-- System Loss Charge -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">System Loss Charge</td>
								<td class="py-3 px-6 text-right value-cell">0.9344</td>
								<td class="py-3 px-6 text-right value-cell">0.9344</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">System Loss Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.9344</td>
								<td class="py-3 px-6 text-right value-cell">0.9344</td>
							</tr>
							<!-- Distribution Charges -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Distribution Charges</td>
								<td class="py-3 px-6 text-right value-cell">0.4613</td>
								<td class="py-3 px-6 text-right value-cell">0.4613</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Distribution Demand Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kW</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Distribution System Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.4613</td>
								<td class="py-3 px-6 text-right value-cell">0.4613</td>
							</tr>
							<!-- Supply Charges -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Supply Charges</td>
								<td class="py-3 px-6 text-right value-cell">0.5376</td>
								<td class="py-3 px-6 text-right value-cell">0.5376</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Supply Retail Customer Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/Cust/Mo</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Supply System Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.5376</td>
								<td class="py-3 px-6 text-right value-cell">0.5376</td>
							</tr>
							<!-- Metering Charges -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Metering Charges</td>
								<td class="py-3 px-6 text-right value-cell">5.3205</td>
								<td class="py-3 px-6 text-right value-cell">0.3205</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Metering Retail Customer Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/Cust/Mo</td>
								<td class="py-3 px-6 text-right value-cell">5.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Metering System Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.3205</td>
								<td class="py-3 px-6 text-right value-cell">0.3205</td>
							</tr>
							<!-- Reinvestment Fund/MCC -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Reinvestment Fund/MCC</td>
								<td class="py-3 px-6 text-right value-cell">0.2178</td>
								<td class="py-3 px-6 text-right value-cell">0.2178</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Reinvestment Fund/MCC</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.2178</td>
								<td class="py-3 px-6 text-right value-cell">0.2178</td>
							</tr>
							<!-- Other Charges -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Other Charges</td>
								<td class="py-3 px-6 text-right value-cell">0.4506</td>
								<td class="py-3 px-6 text-right value-cell">0.0006</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Lifeline Subsidy Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0003</td>
								<td class="py-3 px-6 text-right value-cell">0.0003</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Sr. Citizen Subsidy Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0003</td>
								<td class="py-3 px-6 text-right value-cell">0.0003</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Lifeline Discount (0-15 kWh)</td>
								<td class="py-3 px-6"></td>
								<td class="py-3 px-6 text-right value-cell">0.4000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Lifeline Discount (16-35 kWh)</td>
								<td class="py-3 px-6"></td>
								<td class="py-3 px-6 text-right value-cell">0.0500</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<!-- Franchise Tax -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Franchise Tax</td>
								<td class="py-3 px-6 text-right value-cell">0.0050</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Franchise Tax</td>
								<td class="py-3 px-6"></td>
								<td class="py-3 px-6 text-right value-cell">0.0050</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<!-- Business Tax -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Business Tax</td>
								<td class="py-3 px-6 text-right value-cell">0.0307</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Business Tax - Balayan</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0041</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Business Tax - Calaca</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0117</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Business Tax - Calatagan</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0040</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Business Tax - Lemery</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0033</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Business Tax - Nasugbu</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0034</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Business Tax - Tuy</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0042</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<!-- Real Property Tax -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Real Property Tax</td>
								<td class="py-3 px-6 text-right value-cell">0.0367</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Real Property Tax - Calaca</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0219</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Real Property Tax - Balayan</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0027</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Real Property Tax - Lemery</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0028</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Real Property Tax - Nasugbu</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0034</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Real Property Tax - Taal</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0030</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Real Property Tax - Calatagan</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0029</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<!-- VAT -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">VAT</td>
								<td class="py-3 px-6 text-right value-cell">1.0943</td>
								<td class="py-3 px-6 text-right value-cell">0.8543</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Generation</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.6376</td>
								<td class="py-3 px-6 text-right value-cell">0.6376</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Transmission</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.1096</td>
								<td class="py-3 px-6 text-right value-cell">0.1096</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">System Loss</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.1071</td>
								<td class="py-3 px-6 text-right value-cell">0.1071</td>
							</tr>
							<tr>
								<td class="py-3 px-6">GRAM/ICERA/DAA VAT</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Distribution</td>
								<td class="py-3 px-6 unit-cell">%</td>
								<td class="py-3 px-6 text-right value-cell">0.1200</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">Others</td>
								<td class="py-3 px-6 unit-cell">%</td>
								<td class="py-3 px-6 text-right value-cell">0.1200</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<!-- Universal Charge -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">Universal Charge</td>
								<td class="py-3 px-6 text-right value-cell">0.2250</td>
								<td class="py-3 px-6 text-right value-cell">0.2250</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Missionary Electrification</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.1822</td>
								<td class="py-3 px-6 text-right value-cell">0.1822</td>
							</tr>
							<tr>
								<td class="py-3 px-6">True-up (CY 2012)</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">True-up (CY 2013)</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">True-up (CY 2014)</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">Environmental Charge</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr>
								<td class="py-3 px-6">NPC Stranded Contract Cost</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">NPC Stranded Debts</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0428</td>
								<td class="py-3 px-6 text-right value-cell">0.0428</td>
							</tr>
							<tr>
								<td class="py-3 px-6">GRAM/ICERA/DAA</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
								<td class="py-3 px-6 text-right value-cell">0.0000</td>
							</tr>
							<!-- FIT - ALL -->
							<tr class="category-row">
								<td colspan="2" class="py-3 px-6 font-semibold">FIT - ALL</td>
								<td class="py-3 px-6 text-right value-cell">0.0838</td>
								<td class="py-3 px-6 text-right value-cell">0.0838</td>
							</tr>
							<tr class="stripe-row">
								<td class="py-3 px-6">FIT-ALL Php/kWh</td>
								<td class="py-3 px-6 unit-cell">PhP/kWh</td>
								<td class="py-3 px-6 text-right value-cell">0.0838</td>
								<td class="py-3 px-6 text-right value-cell">0.0838</td>
							</tr>
							<!-- Total Row -->
							<tr class="total-row">
								<td colspan="2" class="py-4 px-6 text-lg">TOTAL RATE</td>
								<td class="py-4 px-6 text-right text-lg value-cell">9.0000</td>
								<td class="py-4 px-6 text-right text-lg value-cell">9.9298</td>
							</tr>
						</tbody>
					</table>
				</div>
				<!-- Overdue Interest Section -->
				<div class="bg-green-50 py-4 px-6 flex justify-between items-center mt-4">
					<div class="text-green-800 font-bold">Overdue Interest</div>
					<div class="text-green-900 font-semibold text-lg">7.29%</div>
				</div>
				<!-- Footer -->
				<div class="bg-green-50 py-5 px-6 flex flex-col sm:flex-row justify-between items-center gap-4">
					<div class="text-green-700 flex items-center">
						<i class="fas fa-info-circle mr-2"></i>
						<span>Rates are in Philippine Peso (PhP)</span>
					</div>
					<div class="flex gap-3">
						<button class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition flex items-center">
							<i class="fas fa-download mr-2"></i>
							Export PDF
						</button>
						<button class="px-4 py-2 bg-white border border-green-500 text-green-600 rounded-lg hover:bg-green-50 transition flex items-center">
							<i class="fas fa-print mr-2"></i>
							Print
						</button>
					</div>
				</div>
			</div>
			<!-- Additional Information -->
			<div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
				<div class="bg-white rounded-xl p-6 shadow-md border border-green-100">
					<div class="flex items-start">
						<div class="bg-green-100 p-3 rounded-lg mr-4">
							<i class="fas fa-lightbulb text-green-600 text-xl"></i>
						</div>
						<div>
							<h3 class="font-bold text-green-800 mb-2">Understanding Your Bill</h3>
							<p class="text-gray-600 text-sm">Your electricity bill is composed of several charges including generation, transmission, distribution, and government taxes.</p>
						</div>
					</div>
				</div>
				<div class="bg-white rounded-xl p-6 shadow-md border border-green-100">
					<div class="flex items-start">
						<div class="bg-green-100 p-3 rounded-lg mr-4">
							<i class="fas fa-leaf text-green-600 text-xl"></i>
						</div>
						<div>
							<h3 class="font-bold text-green-800 mb-2">Renewable Energy</h3>
							<p class="text-gray-600 text-sm">A portion of your bill supports renewable energy initiatives and missionary electrification in remote areas.</p>
						</div>
					</div>
				</div>
				<div class="bg-white rounded-xl p-6 shadow-md border border-green-100">
					<div class="flex items-start">
						<div class="bg-green-100 p-3 rounded-lg mr-4">
							<i class="fas fa-shield-alt text-green-600 text-xl"></i>
						</div>
						<div>
							<h3 class="font-bold text-green-800 mb-2">ERC Regulation</h3>
							<p class="text-gray-600 text-sm">All rates are approved by the Energy Regulatory Commission (ERC) to ensure fair pricing for consumers.</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ Test_EditRatesTable() {
	<form id="rate-edit-form" method="post" action="/v1/employee/sysadmin/accounting/submit-rates-form">
		<div class="min-h-screen flex items-center justify-center p-4 md:p-8">
			<div class="w-full max-w-4xl">
				<div class="card bg-white rounded-xl overflow-hidden">
					<!-- Table -->
					<div class="overflow-x-auto">
						<table class="w-full">
							<thead>
								<tr class="bg-green-50">
									<th class="text-left py-4 px-6 text-green-800 font-semibold w-1/2">PARTICULARS</th>
									<th class="text-left py-4 px-6 text-green-800 font-semibold">UNIT</th>
									<th class="text-right py-4 px-6 text-green-800 font-semibold">RATES</th>
								</tr>
							</thead>
							<tbody>
								<!-- Main Category -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-bold text-lg">RESIDENTIAL</td>
									<td class="py-3 px-6 text-right value-cell"></td>
								</tr>
								<!-- Generation Charges -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Generation Charges</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="generation-total">5.6092</span> <input type="hidden" name="rate[Generation Charges]" id="generation-input" value="5.6092"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Generation Energy Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Generation Energy Charge]" value="5.6092" class="editable-input" data-category="generation"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Other Generation Rate Adjustment</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Other Generation Rate Adjustment]" value="0.0000" class="editable-input" data-category="generation"/></td>
								</tr>
								<!-- Transmission Charges -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Transmission Charges (NGCP)</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="transmission-total">0.6853</span> <input type="hidden" name="rate[Transmission Charges (NGCP)]" id="transmission-input" value="0.6853"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Transmission Demand Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kW</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Transmission Demand Charge]" value="0.0000" class="editable-input" data-category="transmission"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Transmission System Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Transmission System Charge]" value="0.6853" class="editable-input" data-category="transmission"/></td>
								</tr>
								<!-- System Loss Charge -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">System Loss Charge</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="system-loss-total">0.9344</span> <input type="hidden" name="rate[System Loss Charge]" id="system-loss-input" value="0.9344"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">System Loss Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[System Loss Charge]" value="0.9344" class="editable-input" data-category="system-loss"/></td>
								</tr>
								<!-- Distribution Charges -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Distribution Charges</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="distribution-total">0.4613</span> <input type="hidden" name="rate[Distribution Charges]" id="distribution-input" value="0.4613"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Distribution Demand Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kW</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Distribution Demand Charge]" value="0.0000" class="editable-input" data-category="distribution"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Distribution System Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Distribution System Charge]" value="0.4613" class="editable-input" data-category="distribution"/></td>
								</tr>
								<!-- Supply Charges -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Supply Charges</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="supply-total">0.5376</span> <input type="hidden" name="rate[Supply Charges]" id="supply-input" value="0.5376"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Supply Retail Customer Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/Cust/Mo</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Supply Retail Customer Charge]" value="0.0000" class="editable-input" data-category="supply"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Supply System Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Supply System Charge]" value="0.5376" class="editable-input" data-category="supply"/></td>
								</tr>
								<!-- Metering Charges -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Metering Charges</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="metering-total">5.3205</span> <input type="hidden" name="rate[Metering Charges]" id="metering-input" value="5.3205"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Metering Retail Customer Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/Cust/Mo</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Metering Retail Customer Charge]" value="5.0000" class="editable-input" data-category="metering"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Metering System Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Metering System Charge]" value="0.3205" class="editable-input" data-category="metering"/></td>
								</tr>
								<!-- Reinvestment Fund/MCC -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Reinvestment Fund/MCC</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="reinvestment-total">0.2178</span> <input type="hidden" name="rate[Reinvestment Fund/MCC]" id="reinvestment-input" value="0.2178"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Reinvestment Fund/MCC</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Reinvestment Fund/MCC]" value="0.2178" class="editable-input" data-category="reinvestment"/></td>
								</tr>
								<!-- Other Charges -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Other Charges</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="other-charges-total">0.4506</span> <input type="hidden" name="rate[Other Charges]" id="other-charges-input" value="0.4506"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Lifeline Subsidy Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Lifeline Subsidy Charge]" value="0.0003" class="editable-input" data-category="other-charges"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Sr. Citizen Subsidy Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Sr. Citizen Subsidy Charge]" value="0.0003" class="editable-input" data-category="other-charges"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Lifeline Discount (0-15 kWh)</td>
									<td class="py-3 px-6"></td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Lifeline Discount (0-15 kWh)]" value="0.4000" class="editable-input" data-category="other-charges"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Lifeline Discount (16-35 kWh)</td>
									<td class="py-3 px-6"></td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Lifeline Discount (16-35 kWh)]" value="0.0500" class="editable-input" data-category="other-charges"/></td>
								</tr>
								<!-- Franchise Tax -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Franchise Tax</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="franchise-tax-total">0.0050</span> <input type="hidden" name="rate[Franchise Tax]" id="franchise-tax-input" value="0.0050"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Franchise Tax</td>
									<td class="py-3 px-6"></td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Franchise Tax]" value="0.0050" class="editable-input" data-category="franchise-tax"/></td>
								</tr>
								<!-- Business Tax -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Business Tax</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="business-tax-total">0.0307</span> <input type="hidden" name="rate[Business Tax]" id="business-tax-input" value="0.0307"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Business Tax - Balayan</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Business Tax - Balayan]" value="0.0041" class="editable-input" data-category="business-tax"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Business Tax - Calaca</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Business Tax - Calaca]" value="0.0117" class="editable-input" data-category="business-tax"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Business Tax - Calatagan</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Business Tax - Calatagan]" value="0.0040" class="editable-input" data-category="business-tax"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Business Tax - Lemery</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Business Tax - Lemery]" value="0.0033" class="editable-input" data-category="business-tax"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Business Tax - Nasugbu</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Business Tax - Nasugbu]" value="0.0034" class="editable-input" data-category="business-tax"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Business Tax - Tuy</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Business Tax - Tuy]" value="0.0042" class="editable-input" data-category="business-tax"/></td>
								</tr>
								<!-- Real Property Tax -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Real Property Tax</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="property-tax-total">0.0367</span> <input type="hidden" name="rate[Real Property Tax]" id="property-tax-input" value="0.0367"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Real Property Tax - Calaca</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Real Property Tax - Calaca]" value="0.0219" class="editable-input" data-category="property-tax"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Real Property Tax - Balayan</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Real Property Tax - Balayan]" value="0.0027" class="editable-input" data-category="property-tax"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Real Property Tax - Lemery</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Real Property Tax - Lemery]" value="0.0028" class="editable-input" data-category="property-tax"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Real Property Tax - Nasugbu</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Real Property Tax - Nasugbu]" value="0.0034" class="editable-input" data-category="property-tax"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Real Property Tax - Taal</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Real Property Tax - Taal]" value="0.0030" class="editable-input" data-category="property-tax"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Real Property Tax - Calatagan</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Real Property Tax - Calatagan]" value="0.0029" class="editable-input" data-category="property-tax"/></td>
								</tr>
								<!-- VAT -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">VAT</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="vat-total">1.0943</span> <input type="hidden" name="rate[VAT]" id="vat-input" value="1.0943"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Generation</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Generation]" value="0.6376" class="editable-input" data-category="vat"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Transmission</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Transmission]" value="0.1096" class="editable-input" data-category="vat"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">System Loss</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[System Loss]" value="0.1071" class="editable-input" data-category="vat"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">GRAM/ICERA/DAA VAT</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[GRAM/ICERA/DAA VAT]" value="0.0000" class="editable-input" data-category="vat"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Distribution</td>
									<td class="py-3 px-6 unit-cell">%</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Distribution]" value="0.1200" class="editable-input" data-category="vat"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">Others</td>
									<td class="py-3 px-6 unit-cell">%</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Others]" value="0.1200" class="editable-input" data-category="vat"/></td>
								</tr>
								<!-- Universal Charge -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">Universal Charge</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="universal-total">0.2250</span> <input type="hidden" name="rate[Universal Charge]" id="universal-input" value="0.2250"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Missionary Electrification</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Missionary Electrification]" value="0.1822" class="editable-input" data-category="universal"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">True-up (CY 2012)</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[True-up (CY 2012)]" value="0.0000" class="editable-input" data-category="universal"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">True-up (CY 2013)</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[True-up (CY 2013)]" value="0.0000" class="editable-input" data-category="universal"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">True-up (CY 2014)</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[True-up (CY 2014)]" value="0.0000" class="editable-input" data-category="universal"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">Environmental Charge</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[Environmental Charge]" value="0.0000" class="editable-input" data-category="universal"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">NPC Stranded Contract Cost</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[NPC Stranded Contract Cost]" value="0.0000" class="editable-input" data-category="universal"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">NPC Stranded Debts</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[NPC Stranded Debts]" value="0.0428" class="editable-input" data-category="universal"/></td>
								</tr>
								<tr>
									<td class="py-3 px-6">GRAM/ICERA/DAA</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[GRAM/ICERA/DAA]" value="0.0000" class="editable-input" data-category="universal"/></td>
								</tr>
								<!-- FIT - ALL -->
								<tr class="category-row">
									<td colspan="2" class="py-3 px-6 font-semibold">FIT - ALL</td>
									<td class="py-3 px-6 text-right"><span class="calculated-value" id="fit-total">0.0838</span> <input type="hidden" name="rate[FIT - ALL]" id="fit-input" value="0.0838"/></td>
								</tr>
								<tr class="stripe-row">
									<td class="py-3 px-6">FIT-ALL Php/kWh</td>
									<td class="py-3 px-6 unit-cell">PhP/kWh</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.0001" name="rate[FIT-ALL Php/kWh]" value="0.0838" class="editable-input" data-category="fit"/></td>
								</tr>
								<!-- Total Row -->
								<tr class="total-row">
									<td colspan="2" class="py-4 px-6 text-lg">TOTAL RATE</td>
									<td class="py-4 px-6 text-right text-lg"><span id="total-rate-display">9.0000</span> <input type="hidden" name="total_rate" id="total-rate-input" value="9.0000"/></td>
								</tr>
								<!-- Overdue Interest -->
								<tr>
									<td class="py-3 px-6 font-semibold">Overdue Interest (30 days)</td>
									<td class="py-3 px-6 unit-cell">%</td>
									<td class="py-3 px-6 text-right"><input type="number" step="0.01" name="overdue_interest" value="2.00" class="editable-input"/></td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</form>
	<script>
		const inputs = document.querySelectorAll('.editable-input');

		// Function to calculate category total
		function calculateCategoryTotal(category) {
			let total = 0;
			document.querySelectorAll(`.editable-input[data-category="${category}"]`).forEach(input => {
				total += parseFloat(input.value) || 0;
			});
			return parseFloat(total.toFixed(4));
		}



        document.addEventListener('DOMContentLoaded', function() {
            // Get all editable inputs
            
            
            
            
            // Function to update category display and hidden input
            function updateCategory(category) {
                const total = calculateCategoryTotal(category);
                document.getElementById(`${category}-total`).textContent = total.toFixed(4);
                document.getElementById(`${category}-input`).value = total.toFixed(4);
            }
            
            // Function to update overall total
            function updateTotalRate() {
                let total = 0;
                const categories = [
                    'generation', 'transmission', 'system-loss', 'distribution', 
                    'supply', 'metering', 'reinvestment', 'other-charges',
                    'franchise-tax', 'business-tax', 'property-tax', 'vat',
                    'universal', 'fit'
                ];
                
                categories.forEach(category => {
                    total += parseFloat(document.getElementById(`${category}-input`).value) || 0;
                });
                
                total = parseFloat(total.toFixed(4));
                document.getElementById('total-rate-display').textContent = total.toFixed(4);
                document.getElementById('total-rate-input').value = total.toFixed(4);
            }
            
            // Add event listeners to all inputs
            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    const category = this.getAttribute('data-category');
                    if (category) {
                        updateCategory(category);
                    }
                    updateTotalRate();
                });
            });
            
            // Initialize all category totals
            const categories = [
                'generation', 'transmission', 'system-loss', 'distribution', 
                'supply', 'metering', 'reinvestment', 'other-charges',
                'franchise-tax', 'business-tax', 'property-tax', 'vat',
                'universal', 'fit'
            ];
            
            categories.forEach(category => {
                updateCategory(category);
            });
            updateTotalRate();
            
            // Form submission handling with AJAX
            const form = document.getElementById('rate-edit-form');
            const submitBtn = document.getElementById('submit-btn');
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const submitBtnOriginal = submitBtn.innerHTML;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';
                
                try {
                    // Create form data
                    const formData = new FormData(form);
                    
                    // Send AJAX request
                    const response = await fetch(form.action, {
                        method: form.method,
                        body: formData
                    });
                    
                    // Handle response
                    if (response.ok) {
                        const result = await response.text();
                        
                        // Show success message
                        const successMsg = document.getElementById('success-message');
                        successMsg.classList.remove('hidden');
                        
                        // Hide message after animation
                        setTimeout(() => {
                            successMsg.classList.add('hidden');
                        }, 3000);
                        
                        console.log('Server response:', result);
                    } else {
                        throw new Error('Server returned status: ' + response.status);
                    }
                } catch (error) {
                    console.error('Submission error:', error);
                    alert('Error submitting rates: ' + error.message);
                } finally {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = submitBtnOriginal;
                }
            });
        });
    </script>
}

/*

templ SystemAdminEmployeeAccountingTable(
	accountingRatesTableFormType string,
	accountingRatesTable models.AccountingRatesTable) {
	// Determine grid configuration based on form type
	{{ gridClass := "grid grid-cols-4" }} // Default for forms
	if accountingRatesTableFormType == models.AccountingRatesTableFormType.Display {
		{{ gridClass = "grid grid-cols-5" }} // For Display
	}
	// Date input for rates form
	if accountingRatesTableFormType == models.AccountingRatesTableFormType.FormRates {
		<div class="flex justify-end gap-4 m-4">
			<div class="w-full max-w-[8rem]">
				<label for="billing-date" class="mb-1 block text-sm font-medium text-gray-700">
					Billing Date
				</label>
				<!-- Date input -->
				<input
					type="date"
					id="billing-date"
					name="date"
					class="w-full rounded-md border border-gray-300 px-3 py-0.5 text-sm shadow-sm focus:border-green-500 focus:ring-2 focus:ring-green-500"
					required
					value={ accountingRatesTable.Date }
				/>
			</div>
		</div>
	}
	<!-- Table Structure -->
	<div class="space-y-4">
		<!-- Header Separator -->
		<div class="w-full h-0.5 bg-gray-400"></div>
		<!-- Table Header -->
		<div class={ gridClass + " text-center font-bold " }>
			<div class="col-span-2">PARTICULARS</div>
			<div class="">UNIT</div>
			switch accountingRatesTableFormType {
				case models.AccountingRatesTableFormType.Display:
					<div class="">RATES</div>
					<div class="">ERC</div>
				case models.AccountingRatesTableFormType.FormRates:
					<div class="">RATES</div>
				case models.AccountingRatesTableFormType.FormERC:
					<div class="">ERC</div>
			}
		</div>
		<!-- Content Separator -->
		<div class="w-full h-0.5 bg-gray-400"></div>
		<!-- Main Content -->
		<div class="p-2 pb-2 xl:p-4 space-y-4">
			<!-- Header Row with data attributes -->
			<div class={ gridClass + " items-center py-1 font-medium" } data-header-row>
				<div class="col-span-3 text-left pl-2" data-header-particulars>
					<input
						type="text"
						readonly
						name="particulars"
						value={ accountingRatesTable.Particulars }
						class="bg-transparent border-none focus:ring-0 focus:border-none text-left"
					/>
				</div>
				switch accountingRatesTableFormType {
					case models.AccountingRatesTableFormType.Display:
						<div class="text-center">{ accountingRatesTable.Rates }</div>
						<div class="text-center">{ accountingRatesTable.ERC }</div>
					case models.AccountingRatesTableFormType.FormRates:
						<div class="text-center font-medium justify-center">
							<input
								type="text"
								readonly
								name="rates"
								value={ accountingRatesTable.Rates }
								class="header-parent-rate-value bg-transparent border-none focus:ring-0 focus:border-none text-center"
							/>
						</div>
					case models.AccountingRatesTableFormType.FormERC:
						<div class="text-center font-medium justify-center">
							<input
								type="text"
								readonly
								name="erc"
								value={ accountingRatesTable.ERC }
								class="header-parent-rate-value bg-transparent border-none focus:ring-0 focus:border-none text-center"
							/>
						</div>
				}
			</div>
			<!-- Dynamic Rows -->
			for index, item := range accountingRatesTable.AccountingRatesTableRowGroup {
				<div class="space-y-2 group" data-group={ item.Particulars }>
					<!-- Parent Row -->
					<div class={ gridClass + " items-center py-1 font-medium" }>
						switch accountingRatesTableFormType {
							case models.AccountingRatesTableFormType.Display:
								<div class="col-span-3 text-left pl-4">{ item.Particulars }</div>
								// <div class="text-center">{ item.Unit }</div>
								<div class="text-center">{ item.Rates }</div>
								<div class="text-center">{ item.ERC }</div>
							case models.AccountingRatesTableFormType.FormRates:
								<div class="col-span-3 text-left pl-4">
									<input
										type="text"
										readonly
										name={ fmt.Sprintf("row-group[%d].particulars", index) }
										value={ item.Particulars }
										class="bg-transparent border-none focus:ring-0"
									/>
								</div>
								<div class="text-center">
									<input
										type="text"
										readonly
										name={ fmt.Sprintf("row-group[%d].rates", index) }
										value={ item.Rates }
										class="parent-rate-value bg-transparent border-none focus:ring-0 text-center"
									/>
								</div>
							case models.AccountingRatesTableFormType.FormERC:
								<div class="col-span-2 text-left pl-4">
									<input
										type="text"
										readonly
										name={ fmt.Sprintf("row-group[%d].particulars", index) }
										value={ item.Particulars }
										class="bg-transparent border-none focus:ring-0"
									/>
								</div>
								<div class="text-center">
									<input
										type="text"
										readonly
										name={ fmt.Sprintf("row-group[%d].unit", index) }
										value={ item.Unit }
										class="bg-transparent border-none focus:ring-0"
									/>
								</div>
								<div class="text-center">
									<input
										type="text"
										readonly
										name={ fmt.Sprintf("row-group[%d].erc", index) }
										value={ item.ERC }
										class="parent-rate-value bg-transparent border-none focus:ring-0 text-center"
									/>
								</div>
						}
					</div>
					<!-- Sub Items -->
					for subIndex, subitem := range item.SubRowGroup {
						<div class={ gridClass + " items-center py-1  text-slate-600" }>
							switch accountingRatesTableFormType {
								case models.AccountingRatesTableFormType.Display:
									<div class="col-span-2 text-left pl-8">{ subitem.Particulars }</div>
									<div class="text-center">{ subitem.Unit }</div>
									<div class="text-center">{ subitem.Rates }</div>
									<div class="text-center">{ subitem.ERC }</div>
								case models.AccountingRatesTableFormType.FormRates:
									<div class="col-span-2 text-left pl-8">
										<input
											type="hidden"
											name={ fmt.Sprintf("row-group[%d].sub-row-group[%d].particulars", index, subIndex) }
											value={ subitem.Particulars }
										/>
										{ subitem.Particulars }
									</div>
									<div class="text-center">
										<input
											type="hidden"
											name={ fmt.Sprintf("row-group[%d].sub-row-group[%d].unit", index, subIndex) }
											value={ subitem.Unit }
										/>
										{ subitem.Unit }
									</div>
									<div class="text-center">
										<input
											type="number"
											name={ fmt.Sprintf("row-group[%d].sub-row-group[%d].rates", index, subIndex) }
											class="subitem-input w-32 px-2 py-1 border rounded-lg text-center"
											step="0.0001"
											value={ subitem.Rates }
											required
										/>
									</div>
								case models.AccountingRatesTableFormType.FormERC:
									<div class="col-span-2 text-left pl-8">
										<input
											type="hidden"
											name={ fmt.Sprintf("row-group[%d].sub-row-group[%d].particulars", index, subIndex) }
											value={ subitem.Particulars }
										/>
										{ subitem.Particulars }
									</div>
									<div class="text-center">
										<input
											type="hidden"
											name={ fmt.Sprintf("row-group[%d].sub-row-group[%d].unit", index, subIndex) }
											value={ subitem.Unit }
										/>
										{ subitem.Unit }
									</div>
									<div class="text-center">
										<input
											type="number"
											name={ fmt.Sprintf("row-group[%d].sub-row-group[%d].rates", index, subIndex) }
											class="subitem-input w-32 px-2 py-1 border rounded-lg text-center"
											step="0.0001"
											value={ subitem.ERC }
											required
										/>
									</div>
							}
						</div>
					}
				</div>
			}
		</div>
	</div>
	<!-- Rate Calculator for Forms -->
	if accountingRatesTableFormType == models.AccountingRatesTableFormType.FormRates || accountingRatesTableFormType == models.AccountingRatesTableFormType.FormERC {
		<script>
			// Clean up function to remove all listeners
			function cleanupListeners() {
				if (window.ratesFormHandler) {
					document.removeEventListener('input', window.ratesFormHandler);
					delete window.ratesFormHandler;
				}
				if (window.ratesSubmitHandler) {
					document.removeEventListener('submit', window.ratesSubmitHandler);
					delete window.ratesSubmitHandler;
				}
			}

			// Clean up on dialog close
			document.getElementById('updateRatesDialog').addEventListener('close', cleanupListeners);
			document.getElementById('updateERCDialog').addEventListener('close', cleanupListeners);

			// Clean up before new content is loaded
			document.addEventListener('htmx:beforeSwap', function(e) {
				if (e.detail.target.id === 'ratesDialogContent' || e.detail.target.id === 'ercDialogContent') {
					cleanupListeners();
				}
			});

			// Initialize calculation handlers only once per form instance
			function initializeHandlers() {
				cleanupListeners(); // Clean up any existing handlers first

				// Input calculation handler
				window.ratesFormHandler = function(e) {
					if (!e.target.matches('.subitem-input')) return;
					
					const groupDiv = e.target.closest('[data-group]');
					const inputs = groupDiv.querySelectorAll('.subitem-input');
					const sum = Array.from(inputs).reduce((acc, input) => 
						acc + (parseFloat(input.value) || 0), 0);
					
					// Update parent rate input
					const parentRateInput = groupDiv.querySelector('.parent-rate-value');
					if (parentRateInput) {
						parentRateInput.value = sum.toFixed(4);
					}
					
					// Update header rate input
					const allRates = Array.from(document.querySelectorAll('.parent-rate-value'));
					const headerRate = allRates.reduce((acc, input) => 
						acc + (parseFloat(input.value) || 0), 0);
					
					const headerRateInput = document.querySelector('.header-parent-rate-value');
					if (headerRateInput) {
						headerRateInput.value = headerRate.toFixed(4);
					}
				};

				// Attach event listeners
				document.addEventListener('input', window.ratesFormHandler);

				// Initialize with existing values
				document.querySelectorAll('.subitem-input').forEach(input => {
					const event = new Event('input', { bubbles: true });
					input.dispatchEvent(event);
				});
			}

			// Initialize on form load
			initializeHandlers();
		</script>
	}
}

*/

//<-------------------------------------------------->//
templ SystemAdminEmployeePaymentWebPage() {
	@SystemAdminEmployeeBaseWebPage() {
		<!DOCTYPE html>
		<html lang="en">
			<head>
				<meta charset="UTF-8"/>
				<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
				<title>EcoPower - Electricity Payment</title>
				<script src="https://cdn.tailwindcss.com"></script>
				<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
				<script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
				<style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

        body {
            font-family: 'Poppins', sans-serif;
            background: #ffffff;
        }

        .header-gradient {
            background: linear-gradient(90deg, #166534 0%, #22c55e 100%);
        }

        .card {
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05), 0 10px 10px -5px rgba(0, 0, 0, 0.02);
            border-radius: 16px;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px -5px rgba(0, 0, 0, 0.1);
        }

        .spinner {
            width: 24px;
            height: 24px;
            border: 3px solid rgba(255, 255, 255, .3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.85);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner-lg {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #16a34a;
            animation: spin 1s linear infinite;
        }

        .bill-item {
            transition: all 0.3s ease;
            border-left: 3px solid #22c55e;
        }

        .overdue-item {
            border-left: 3px solid #ef4444;
        }

        .due-badge {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4);
            }

            70% {
                box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
            }
        }

        .progress-bar {
            height: 8px;
            border-radius: 4px;
            background: #e5e7eb;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #22c55e 0%, #16a34a 100%);
            border-radius: 4px;
        }

        .bill-table td {
            padding: 12px 16px;
            border-bottom: 1px solid #e5e7eb;
        }

        .bill-table tr:last-child td {
            border-bottom: none;
        }

        .payment-history-table {
            width: 100%;
            border-collapse: collapse;
        }

        .payment-history-table th {
            background-color: #f9fafb;
            text-align: left;
            padding: 12px 16px;
            font-weight: 600;
            color: #374151;
            border-bottom: 1px solid #e5e7eb;
        }

        .payment-history-table td {
            padding: 12px 16px;
            border-bottom: 1px solid #e5e7eb;
            color: #4b5563;
        }

        .payment-history-table tr:last-child td {
            border-bottom: none;
        }

        .payment-history-table tr:hover {
            background-color: #f9fafb;
        }

        .payment-status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-paid {
            background-color: #dcfce7;
            color: #166534;
        }

        .status-pending {
            background-color: #fef3c7;
            color: #92400e;
        }

        .disabled-button {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .error-message {
            background-color: #fef2f2;
            color: #b91c1c;
            padding: 12px 16px;
            border-radius: 8px;
            margin-top: 12px;
            display: flex;
            align-items: flex-start;
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .error-message i {
            margin-right: 10px;
            margin-top: 3px;
        }

        .loading-overlay.hidden {
            display: none !important;
        }
        
        .overdue-bill-card {
            border-left: 4px solid #ef4444;
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 16px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .overdue-bill-header {
            padding: 12px 16px;
            background-color: #fef2f2;
            font-weight: 600;
            color: #b91c1c;
        }
        
        .overdue-bill-detail {
            padding: 8px 16px;
            display: flex;
            justify-content: space-between;
            border-bottom: 1px solid #f3f4f6;
        }
        
        .overdue-bill-detail:last-child {
            border-bottom: none;
        }
        
        .overdue-bill-footer {
            padding: 12px 16px;
            background-color: #f9fafb;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
        }
        
        .no-data-message {
            text-align: center;
            padding: 20px;
            color: #6b7280;
            font-style: italic;
        }
    </style>
			</head>
			<body class="min-h-screen flex flex-col">
				<!-- Main Content -->
				<main class="flex-grow container mx-auto px-4 py-8">
					<div class="max-w-4xl mx-auto">
						<div class="text-center mb-10">
							<h2 class="text-3xl font-bold text-gray-800 mb-3">Electricity Bill Payment</h2>
							<p class="text-gray-600 max-w-lg mx-auto">
								Quick, secure payments for your electricity bills. View your
								current charges and overdue amounts in one place.
							</p>
						</div>
						<!-- Account Input Card -->
						<div id="accountInputCard" class="bg-white card p-6 mb-8">
							<div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
								<div class="flex items-center mb-4 md:mb-0">
									<div class="bg-primary-100 p-3 rounded-full mr-4">
										<i class="fas fa-search text-primary-600 text-xl"></i>
									</div>
									<h3 class="text-xl font-semibold text-gray-800">Find Your Account</h3>
								</div>
								<div class="bg-primary-50 px-4 py-2 rounded-full text-sm text-primary-700">
									<i class="fas fa-lightbulb mr-2"></i>Enter your 8-digit account number
								</div>
							</div>
							<div class="mb-6">
								<label class="block text-gray-700 mb-2 font-medium">Consumer Account Number</label>
								<div class="relative">
									<input
										type="text"
										id="accountNumber"
										placeholder="Enter your 8-digit account number"
										class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition text-lg"
										maxlength="8"
									/>
									<i class="fas fa-hashtag absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
								</div>
								<div id="accountError" class="hidden bg-red-50 text-red-800 p-3 rounded-lg mb-4 flex items-start">
									<i class="fas fa-exclamation-circle mt-1 mr-2"></i>
									<div>
										<strong class="font-medium">Error:</strong> <span id="errorMessage"></span>
									</div>
								</div>
							</div>
							<button
								id="fetchAccountBtn"
								class="w-full bg-primary-600 hover:bg-primary-700 text-white font-semibold py-3 px-4 rounded-lg transition flex items-center justify-center"
							>
								<span>Retrieve Account Details</span>
								<i class="fas fa-arrow-right ml-2"></i>
							</button>
						</div>
						<!-- Account Details Card (Initially Hidden) -->
						<div id="accountDetails" class="bg-white card p-6 hidden">
							<div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
								<div class="flex items-center mb-4 md:mb-0">
									<div class="bg-primary-100 p-3 rounded-full mr-4">
										<i class="fas fa-user-circle text-primary-600 text-xl"></i>
									</div>
									<div>
										<h3 class="text-xl font-semibold text-gray-800">Account Details</h3>
										<p class="text-gray-600 text-sm">View your billing information and payment options</p>
									</div>
								</div>
							</div>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
								<div class="bg-gray-50 p-5 rounded-xl">
									<div class="flex justify-between items-start mb-4">
										<div>
											<p class="text-gray-600 text-sm">Account Holder</p>
											<p id="fullName" class="font-semibold text-gray-800 text-lg">-</p>
										</div>
										<div class="bg-white p-2 rounded-lg">
											<i class="fas fa-user text-primary-600"></i>
										</div>
									</div>
									<div class="flex justify-between">
										<div>
											<p class="text-gray-600 text-sm">Account Number</p>
											<p id="accountNum" class="font-semibold text-gray-800">-</p>
										</div>
										<div>
											<p class="text-gray-600 text-sm">Last Payment</p>
											<p id="lastPaymentDate" class="font-semibold text-gray-800">-</p>
										</div>
									</div>
								</div>
								<div class="bg-primary-50 p-5 rounded-xl">
									<div class="flex justify-between items-center mb-3">
										<p class="text-gray-700 font-medium">Total Amount Due</p>
										<p id="accountBalance" class="text-2xl font-bold text-gray-800">-</p>
									</div>
									<div id="dueDateContainer" class="mb-2">
										<div class="flex justify-between text-sm text-gray-600">
											<span>Due Date</span>
											<span id="dueDate">-</span>
										</div>
									</div>
									<div id="progressContainer">
										<div class="progress-bar">
											<div id="dueProgress" class="progress-fill" style="width: 70%"></div>
										</div>
									</div>
								</div>
							</div>
							<!-- Bill Breakdown -->
							<div class="mb-8">
								<h4 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
									<i class="fas fa-file-invoice mr-3 text-primary-600"></i> Bill Breakdown
								</h4>
								<!-- Current Bill -->
								<div class="mb-6">
									<h5 id="currentBillTitle" class="text-md font-medium text-gray-700 mb-3 flex items-center">
										<i class="fas fa-bolt text-green-500 mr-2"></i> Current Bill
										<span id="dueIndicator" class="ml-auto text-sm font-normal bg-green-100 text-green-800 px-2 py-1 rounded">
											-
										</span>
									</h5>
									<div class="bg-white border border-gray-200 rounded-xl overflow-hidden">
										<table class="w-full bill-table" id="currentBillTable">
											<tr>
												<td>Bill ID</td>
												<td id="currentBillId" class="text-right font-mono">-</td>
											</tr>
											<tr>
												<td id="billPeriod">-</td>
												<td class="text-right">
													<span id="billAmount">0.00</span>
												</td>
											</tr>
											<tr class="bg-gray-50">
												<td class="font-semibold">Current Bill Total</td>
												<td id="currentBillTotal" class="text-right font-semibold">-</td>
											</tr>
										</table>
									</div>
								</div>
								<!-- Overdue Bills -->
								<div class="mb-6">
									<h5 class="text-md font-medium text-gray-700 mb-3 flex items-center">
										<i class="fas fa-exclamation-triangle text-red-500 mr-2"></i> Overdue Bills
										<span
											class="ml-auto text-sm font-normal bg-red-100 text-red-800 px-2 py-1 rounded due-badge"
										>
											over 30 days
										</span>
									</h5>
									<div id="overdueBillsContainer" class="space-y-4">
										<!-- Overdue bills will be populated here dynamically -->
									</div>
									<div id="overdueTotalContainer" class="bg-gray-50 border-t border-gray-200 p-4 mt-4 hidden">
										<div class="flex justify-between">
											<div class="font-semibold">Overdue Bills Total</div>
											<div class="font-semibold" id="overdueTotalAmount">₱0.00</div>
										</div>
									</div>
								</div>
								<!-- Total Amount -->
								<div class="bg-primary-50 border border-primary-200 rounded-xl p-5">
									<div class="flex justify-between items-center">
										<div>
											<p class="text-gray-700 font-medium">Total Amount Due</p>
											<p class="text-sm text-gray-600">Includes all current and overdue charges</p>
										</div>
										<p id="totalAmount" class="text-2xl font-bold text-gray-800">₱0.00</p>
									</div>
								</div>
							</div>
							<!-- Payment History -->
							<div class="border-t border-gray-200 pt-6">
								<h4 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
									<i class="fas fa-history mr-3 text-primary-600"></i> Payment History
								</h4>
								<div class="overflow-x-auto rounded-lg border border-gray-200 mb-6">
									<table class="payment-history-table">
										<thead>
											<tr>
												<th>Date</th>
												<th>Bill ID</th>
												<th>Amount</th>
												<th>Status</th>
											</tr>
										</thead>
										<tbody id="paymentHistoryBody">
											<!-- Rows will be inserted here dynamically -->
										</tbody>
									</table>
								</div>
								<button
									id="confirmPaymentBtn"
									class="w-full bg-primary-600 hover:bg-primary-700 text-white font-semibold py-4 px-4 rounded-lg transition flex items-center justify-center text-lg"
								>
									<i class="fas fa-lock mr-3"></i>
									<span>Pay Now</span>
								</button>
								<button
									id="cancelAccountBtn"
									class="w-full bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-4 px-4 rounded-lg transition flex items-center justify-center text-lg mt-4"
								>
									<i class="fas fa-times mr-3"></i>
									<span>Cancel</span>
								</button>
								<p class="text-xs text-gray-500 mt-3 text-center">
									<i class="fas fa-shield-alt mr-1"></i> Your payment is secured with 256-bit encryption
								</p>
							</div>
						</div>
						<!-- Payment Confirmation (Initially Hidden) -->
						<div id="paymentConfirmation" class="bg-white card p-6 hidden">
							<div class="text-center py-8">
								<div class="flex justify-center mb-6">
									<div class="bg-green-100 w-20 h-20 rounded-full flex items-center justify-center">
										<i class="fas fa-check text-green-600 text-3xl"></i>
									</div>
								</div>
								<h3 class="text-2xl font-semibold text-gray-800 mb-2">Payment Successful!</h3>
								<p class="text-gray-600 mb-6 max-w-md mx-auto">
									Your electricity bill payment has been processed
									successfully. A receipt has been sent to your email.
								</p>
								<div class="bg-green-50 border border-green-200 rounded-xl p-6 max-w-md mx-auto mb-8">
									<div class="grid grid-cols-2 gap-4 text-left">
										<div>
											<p class="text-gray-600 text-sm">Amount Paid:</p>
											<p id="paidAmount" class="font-medium text-gray-800">₱0.00</p>
										</div>
										<div>
											<p class="text-gray-600 text-sm">Account Number:</p>
											<p id="paidAccount" class="font-medium text-gray-800">-</p>
										</div>
										<div>
											<p class="text-gray-600 text-sm">Transaction ID:</p>
											<p id="transactionId" class="font-medium text-green-600">-</p>
										</div>
										<div>
											<p class="text-gray-600 text-sm">Date:</p>
											<p id="paymentDate" class="font-medium text-gray-800">-</p>
										</div>
									</div>
								</div>
								<div class="flex flex-col sm:flex-row justify-center gap-4">
									<button
										id="newPaymentBtn"
										class="bg-primary-600 hover:bg-primary-700 text-white font-semibold py-3 px-8 rounded-lg transition"
									>
										<i class="fas fa-receipt mr-2"></i>View Receipt
									</button>
									<button
										id="anotherPaymentBtn"
										class="bg-white border border-primary-600 text-primary-600 hover:bg-primary-50 font-semibold py-3 px-8 rounded-lg transition"
									>
										<i class="fas fa-bolt mr-2"></i>Make Another Payment
									</button>
								</div>
							</div>
						</div>
					</div>
				</main>
				<!-- Loading Overlay -->
				<div id="loadingOverlay" class="loading-overlay hidden">
					<div class="text-center">
						<div class="spinner-lg mb-4"></div>
						<p class="text-gray-700 font-medium">Processing your request</p>
					</div>
				</div>
				<script>
        document.addEventListener('DOMContentLoaded', function () {
            // DOM Elements
            const accountNumberInput = document.getElementById('accountNumber');
            const fetchAccountBtn = document.getElementById('fetchAccountBtn');
            const accountDetails = document.getElementById('accountDetails');
            const accountInputCard = document.getElementById('accountInputCard');
            const cancelAccountBtn = document.getElementById('cancelAccountBtn');
            const paymentConfirmation = document.getElementById('paymentConfirmation');
            const loadingOverlay = document.getElementById('loadingOverlay');
            const fullNameElement = document.getElementById('fullName');
            const accountNumElement = document.getElementById('accountNum');
            const lastPaymentElement = document.getElementById('lastPaymentDate');
            const accountBalanceElement = document.getElementById('accountBalance');
            const totalAmountElement = document.getElementById('totalAmount');
            const dueIndicator = document.getElementById('dueIndicator');
            const dueDateElement = document.getElementById('dueDate');
            const dueProgress = document.getElementById('dueProgress');
            const paidAmountElement = document.getElementById('paidAmount');
            const paidAccountElement = document.getElementById('paidAccount');
            const paymentDateElement = document.getElementById('paymentDate');
            const transactionIdElement = document.getElementById('transactionId');
            const confirmPaymentBtn = document.getElementById('confirmPaymentBtn');
            const newPaymentBtn = document.getElementById('newPaymentBtn');
            const anotherPaymentBtn = document.getElementById('anotherPaymentBtn');
            const billPeriod = document.getElementById('billPeriod');
            const billAmount = document.getElementById('billAmount');
            const currentBillTotal = document.getElementById('currentBillTotal');
            const currentBillTitle = document.getElementById('currentBillTitle');
            const overdueBillsContainer = document.getElementById('overdueBillsContainer');
            const overdueTotalAmount = document.getElementById('overdueTotalAmount');
            const overdueTotalContainer = document.getElementById('overdueTotalContainer');
            const dueDateContainer = document.getElementById('dueDateContainer');
            const progressContainer = document.getElementById('progressContainer');
            const paymentHistoryBody = document.getElementById('paymentHistoryBody');
			const currentBillTable = document.getElementById('currentBillTable');

            // Utility Functions
            function parseDate(dateValue) {
                if (dateValue?.$date) {
                    return new Date(dateValue.$date);
                }
                return new Date(dateValue);
            }

            function formatDate(dateValue) {
                const date = parseDate(dateValue);
                if (isNaN(date.getTime())) return "N/A";
                
                const options = { year: 'numeric', month: 'long', day: 'numeric' };
                return date.toLocaleDateString(undefined, options);
            }
            
            function formatMonthYear(dateValue) {
                const date = parseDate(dateValue);
                if (isNaN(date.getTime())) return "N/A";
                
                const options = { year: 'numeric', month: 'long' };
                return date.toLocaleDateString(undefined, options);
            }
            
            function formatDateShort(dateValue) {
                const date = parseDate(dateValue);
                if (isNaN(date.getTime())) return "N/A";
                
                const options = { month: 'short', day: 'numeric' };
                return date.toLocaleDateString(undefined, options);
            }
            
			function calculateDaysRemaining(dueDate) {
				const today = new Date();
				const todayUTC = Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
				const due = parseDate(dueDate);
				const dueUTC = Date.UTC(due.getUTCFullYear(), due.getUTCMonth(), due.getUTCDate());
				return Math.ceil((dueUTC - todayUTC) / (1000 * 60 * 60 * 24));
			}
            
            function calculateDaysOverdue(dueDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const due = parseDate(dueDate);
                if (isNaN(due.getTime())) return 0;
                
                due.setHours(0, 0, 0, 0);
                const timeDiff = today - due;
                return Math.max(0, Math.ceil(timeDiff / (1000 * 60 * 60 * 24)));
            }
            
			function calculateProgress(issueDate, dueDate) {
				const today = new Date();
				const todayUTC = Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
				const issue = parseDate(issueDate);
				const issueUTC = Date.UTC(issue.getUTCFullYear(), issue.getUTCMonth(), issue.getUTCDate());
				const due = parseDate(dueDate);
				const dueUTC = Date.UTC(due.getUTCFullYear(), due.getUTCMonth(), due.getUTCDate());

				const totalDays = Math.ceil((dueUTC - issueUTC) / (1000 * 60 * 60 * 24));
				if (totalDays <= 0) return 100;

				const daysPassed = Math.ceil((todayUTC - issueUTC) / (1000 * 60 * 60 * 24));
				const safeDaysPassed = Math.max(0, Math.min(daysPassed, totalDays));
				return (safeDaysPassed / totalDays) * 100;
			}

            function showError(message) {
                const errorMessage = document.getElementById('errorMessage');
                const accountError = document.getElementById('accountError');
                errorMessage.textContent = message;
                accountError.classList.remove('hidden');
                setTimeout(() => accountError.classList.add('hidden'), 5000);
            }

            function showLoading() {
                loadingOverlay.classList.remove('hidden');
            }

            function hideLoading() {
                loadingOverlay.classList.add('hidden');
            }

            // Mock data for simulation
            const mockAccountData = {
                _id: 1,
                acctNum: 12345678,
                consumerName: "Juan Dela Cruz",
                consumerType: "Residential",
                isActive: true,
                lastPaymentDate: null,
                currentBill: {
                    billId: "BIL20230701",
                    issueDate: "2023-07-01T00:00:00Z",
                    dueDate: "2023-07-31T00:00:00Z",
                    duration: {
                        start: "2023-06-01T00:00:00Z",
                        end: "2023-06-30T00:00:00Z"
                    },
                    charges: {
                        amountDue: 1850.75,
                        usedKwH: 150,
                        rates: {}, // Ignored as per requirements
                        overdueFees: null
                    },
                    isPaid: false
                },
                overdueBill: [],
                billHistory: [],
                paymentHistory: []
            };

            // Mock paid account data
            const mockPaidAccountData = {
                _id: 2,
                acctNum: 87654321,
                consumerName: "Maria Santos",
                consumerType: "Commercial",
                isActive: true,
                lastPaymentDate: "2023-07-15T00:00:00Z",
                currentBill: {
                    billId: "BIL20230801",
                    issueDate: "2023-08-01T00:00:00Z",
                    dueDate: "2023-08-31T00:00:00Z",
                    duration: {
                        start: "2023-07-01T00:00:00Z",
                        end: "2023-07-31T00:00:00Z"
                    },
                    charges: {
                        amountDue: 2250.50,
                        usedKwH: 185,
                        rates: {}, // Ignored as per requirements
                        overdueFees: null
                    },
                    isPaid: true
                },
                overdueBill: [],
                billHistory: [],
                paymentHistory: [
                    {
                        billIds: ["BIL20230701"],
                        date: "2023-07-15T00:00:00Z",
                        amount: 1850.75,
                        status: "Paid"
                    }
                ]
            };

            // Mock account with overdue bills
            const mockOverdueAccountData = {
                _id: 3,
                acctNum: 11223344,
                consumerName: "Pedro Reyes",
                consumerType: "Residential",
                isActive: true,
                lastPaymentDate: "2023-06-10T00:00:00Z",
                currentBill: {
                    billId: "BIL20230701",
                    issueDate: "2023-07-01T00:00:00Z",
                    dueDate: "2023-07-31T00:00:00Z",
                    duration: {
                        start: "2023-06-01T00:00:00Z",
                        end: "2023-06-30T00:00:00Z"
                    },
                    charges: {
                        amountDue: 1850.75,
                        usedKwH: 150,
                        rates: {}, // Ignored as per requirements
                        overdueFees: null
                    },
                    isPaid: false
                },
                overdueBill: [
                    {
                        billId: "BIL20230501",
                        issueDate: "2023-05-01T00:00:00Z",
                        dueDate: "2023-05-31T00:00:00Z",
                        duration: {
                            start: "2023-04-01T00:00:00Z",
                            end: "2023-04-30T00:00:00Z"
                        },
                        charges: {
                            amountDue: 1200.50,
                            usedKwH: 95,
                            rates: {}, // Ignored as per requirements
                            overdueFees: {
                                serviceFee: { rate: 0.05, value: 100 },
                                interest: { rate: 0.03, value: 75 }
                            }
                        },
                        isPaid: false
                    },
                    {
                        billId: "BIL20230401",
                        issueDate: "2023-04-01T00:00:00Z",
                        dueDate: "2023-04-30T00:00:00Z",
                        duration: {
                            start: "2023-03-01T00:00:00Z",
                            end: "2023-03-31T00:00:00Z"
                        },
                        charges: {
                            amountDue: 980.25,
                            usedKwH: 78,
                            rates: {}, // Ignored as per requirements
                            overdueFees: {
                                serviceFee: { rate: 0.05, value: 85 },
                                interest: { rate: 0.03, value: 65 }
                            }
                        },
                        isPaid: false
                    }
                ],
                billHistory: [],
                paymentHistory: [
                    {
                        billIds: ["BIL20230301"],
                        date: "2023-04-15T00:00:00Z",
                        amount: 890.50,
                        status: "Paid"
                    },
                    {
                        billIds: ["BIL20230201"],
                        date: "2023-03-10T00:00:00Z",
                        amount: 750.25,
                        status: "Paid"
                    }
                ]
            };

            async function fetchAccountDetails(accountNumber) {
                // Mock responses for simulation
                if (accountNumber === "12345678") {
                    return mockAccountData;
                } else if (accountNumber === "87654321") {
                    return mockPaidAccountData;
                } else if (accountNumber === "11223344") {
                    return mockOverdueAccountData;
                }

                const url = '/v1/employee/sysadmin/payment/verify-account-number';
                const options = {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ accountNumber })
                };

                try {
                    const response = await fetch(url, options);
                    const data = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(data.error || 'Failed to fetch account details');
                    }
                    
                    return data;
                } catch (error) {
                    throw new Error(error.message || 'An error occurred while fetching account details');
                }
            }

            async function processPayment(totalAmount, accountNumber, billIds) {
                const url = '/v1/employee/sysadmin/payment/process-payment';
                const options = {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        accountNumber,
                        amount: totalAmount,
                        billIds
                    })
                };

                try {
                    const response = await fetch(url, options);
                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.error || 'Payment processing failed');
                    }
                    return data;
                } catch (error) {
                    throw new Error(error.message || 'An error occurred while processing payment');
                }
            }

            function renderAccountDetails(accountData) {
                // Account info
                fullNameElement.textContent = accountData.consumerName || "N/A";
                accountNumElement.textContent = accountData.acctNum;
                
                // Last payment date
                if (accountData.lastPaymentDate) {
                    lastPaymentElement.textContent = formatDate(accountData.lastPaymentDate);
                } else {
                    lastPaymentElement.textContent = "No payment history";
                }

                // Initialize totals
                let currentAmount = 0;
                let overdueTotal = 0;
                let totalDue = 0;

                // Current bill handling
                if (accountData.currentBill && !accountData.currentBill.isPaid) {
                    const bill = accountData.currentBill;
                    currentAmount = bill.charges.amountDue;
                    
                    // Update bill details
                    document.getElementById('currentBillId').textContent = bill.billId;
                    
                    // Format bill period
                    billPeriod.textContent = `${formatDateShort(bill.duration.start)} - ${formatDateShort(bill.duration.end)}`;
                    
                    // Update amounts
                    billAmount.textContent = `₱${currentAmount.toFixed(2)}`;
                    currentBillTotal.textContent = `₱${currentAmount.toFixed(2)}`;
                    
                    // Update bill title with issue date
                    currentBillTitle.innerHTML = `
                        <i class="fas fa-bolt text-green-500 mr-2"></i> 
                        Current Bill (${formatMonthYear(bill.issueDate)})
                    `;
                    
                    // Due date info
                    const dueDate = bill.dueDate;
					const issueDate = bill.issueDate;
                    dueDateElement.textContent = formatDate(dueDate);
                    
                    // Days remaining
                    const daysRemaining = calculateDaysRemaining(dueDate);
                    if (daysRemaining < 0) {
                        dueIndicator.textContent = `Overdue by ${Math.abs(daysRemaining)} days`;
                        dueIndicator.className = 'ml-auto bg-red-100 text-red-800 px-4 py-2 rounded text-sm font-medium';
                    } else {
                        dueIndicator.textContent = `Due in ${daysRemaining} days`;
                        dueIndicator.className = 'ml-auto bg-green-100 text-green-800 px-4 py-2 rounded text-sm font-medium';
                    }
                    
                    // Progress bar
                    const progressPercent = calculateProgress(issueDate,dueDate);
                    dueProgress.style.width = `${progressPercent}%`;
                    
                    // Show due date elements
                    dueDateContainer.classList.remove('hidden');
                    progressContainer.classList.remove('hidden');
                    dueIndicator.classList.remove('hidden');
                } else {
                    // Check if current bill is paid AND amount due is zero
					if (accountData.currentBill?.isPaid || accountData.currentBill.charges.amountDue === 0.00) {
						// Replace table with "No current bill to pay" message
						currentBillTable.innerHTML = `
							<tr>
								<td colspan="2">
									<div class="no-data-message">
										<i class="fas fa-check-circle text-green-500 mr-2"></i> No current bill to pay
									</div>
								</td>
							</tr>
						`;
					} else {
						// Existing logic for paid bills with amount due
						document.getElementById('currentBillId').textContent = "N/A";
						billPeriod.textContent = "No current bill";
						billAmount.textContent = "₱0.00";
						currentBillTotal.textContent = "₱0.00";
					}

					// Update bill title
					if (accountData.currentBill?.isPaid) {
						currentBillTitle.innerHTML = `
							<i class="fas fa-bolt text-green-500 mr-2"></i> 
							Current Bill (${formatMonthYear(accountData.currentBill.issueDate)})
						`;
						dueIndicator.textContent = "Paid";
						dueIndicator.className = 'ml-auto bg-green-100 text-green-800 px-4 py-2 rounded text-sm font-medium';
					} else {
						currentBillTitle.innerHTML = `
							<i class="fas fa-bolt text-green-500 mr-2"></i> 
							Current Bill
						`;
						dueIndicator.classList.add('hidden');
					}
					
					// Hide due date elements
					dueDateContainer.classList.add('hidden');
					progressContainer.classList.add('hidden');
                }

                // Overdue bills handling
                overdueBillsContainer.innerHTML = '';
                if (accountData.overdueBill && accountData.overdueBill.length > 0) {
                    accountData.overdueBill.forEach(bill => {
                        if (!bill.isPaid) {
                            const base = bill.charges.amountDue;
                            const interest = bill.charges.overdueFees?.interest?.value || 0;
                            const serviceFee = bill.charges.overdueFees?.serviceFee?.value || 0;
                            const billTotal = base + interest + serviceFee;
                            overdueTotal += billTotal;
                            
                            const issueDate = bill.issueDate;
                            const dueDate = bill.dueDate;
                            const daysOverdue = calculateDaysOverdue(dueDate);
                            
                            const billElement = document.createElement('div');
                            billElement.className = 'overdue-bill-card';
                            billElement.innerHTML = `
                                <div class="overdue-bill-header">
                                    ${formatMonthYear(issueDate)} (${daysOverdue} days overdue)
                                </div>
                                <div class="overdue-bill-detail">
                                    <div>Bill ID</div>
                                    <div class="font-mono">${bill.billId}</div>
                                </div>
                                <div class="overdue-bill-detail">
                                    <div>Base Amount</div>
                                    <div>₱${base.toFixed(2)}</div>
                                </div>
                                <div class="overdue-bill-detail">
                                    <div>Interest (${bill.charges.overdueFees?.interest?.rate * 100 || 0}%)</div>
                                    <div>₱${interest.toFixed(2)}</div>
                                </div>
                                <div class="overdue-bill-detail">
                                    <div>Service Fee</div>
                                    <div>₱${serviceFee.toFixed(2)}</div>
                                </div>
                                <div class="overdue-bill-footer">
                                    <div>Total for ${formatMonthYear(issueDate)}</div>
                                    <div>₱${billTotal.toFixed(2)}</div>
                                </div>
                            `;
                            overdueBillsContainer.appendChild(billElement);
                        }
                    });
                    
                    // Show overdue total
                    if (overdueTotal > 0) {
                        overdueTotalAmount.textContent = `₱${overdueTotal.toFixed(2)}`;
                        overdueTotalContainer.classList.remove('hidden');
                    } else {
                        overdueTotalContainer.classList.add('hidden');
                    }
                }
                
                if (overdueBillsContainer.children.length === 0) {
                    overdueBillsContainer.innerHTML = `
                        <div class="no-data-message">
                            <i class="fas fa-check-circle text-green-500 mr-2"></i> No overdue bills
                        </div>
                    `;
                    overdueTotalContainer.classList.add('hidden');
                }

                // Calculate total amount due
                totalDue = currentAmount + overdueTotal;
                accountBalanceElement.textContent = `₱${totalDue.toFixed(2)}`;
                totalAmountElement.textContent = `₱${totalDue.toFixed(2)}`;
                
                // Update payment button
                confirmPaymentBtn.innerHTML = `<i class="fas fa-lock mr-3"></i><span>Pay ₱${totalDue.toFixed(2)} Now</span>`;
                
                if (totalDue <= 0) {
                    confirmPaymentBtn.disabled = true;
                    confirmPaymentBtn.classList.add('disabled-button');
                } else {
                    confirmPaymentBtn.disabled = false;
                    confirmPaymentBtn.classList.remove('disabled-button');
                }

                // Payment history
                paymentHistoryBody.innerHTML = '';
                if (accountData.paymentHistory && accountData.paymentHistory.length > 0) {
                    accountData.paymentHistory.forEach(payment => {
                        const row = document.createElement('tr');
						const statusText = 'paid';
                        row.innerHTML = `
                            <td>${formatDate(payment.date)}</td>
                            <td>${payment.billIds[0] || 'N/A'}</td>
                            <td>₱${payment.amount.toFixed(2)}</td>
                            <td><span class="payment-status status-${statusText}">${statusText}</span></td>
                        `;
                        paymentHistoryBody.appendChild(row);
                    });
                } else {
                    paymentHistoryBody.innerHTML = `
                        <tr>
                            <td colspan="4" class="no-data-message">No payment history found</td>
                        </tr>
                    `;
                }
                
                // Store account data for payment processing
                window.currentAccountData = accountData;
            }

            function renderPaymentConfirmation(paymentData) {
                paidAmountElement.textContent = `₱${paymentData.amount.toFixed(2)}`;
                paidAccountElement.textContent = paymentData.accountNumber;
                transactionIdElement.textContent = paymentData.transactionId;
                paymentDateElement.textContent = formatDate(paymentData.date);
            }

            // Event Handlers
            fetchAccountBtn.addEventListener('click', async function () {
                const accountNumber = accountNumberInput.value.trim();
                if (!accountNumber || !/^\d{8}$/.test(accountNumber)) {
                    showError('Please enter a valid 8-digit account number');
                    return;
                }
                showLoading();
                try {
                    const accountData = await fetchAccountDetails(accountNumber);
                    renderAccountDetails(accountData);
                    accountInputCard.classList.add('hidden');
                    accountDetails.classList.remove('hidden');
                    accountDetails.scrollIntoView({ behavior: 'smooth', block: 'start' });
                } catch (error) {
                    showError(error.message);
                } finally {
                    hideLoading();
                }
            });

            cancelAccountBtn.addEventListener('click', function() {
                accountDetails.classList.add('hidden');
                accountInputCard.classList.remove('hidden');
            });

            confirmPaymentBtn.addEventListener('click', async function () {
                if (confirmPaymentBtn.disabled) return;
                
                const totalAmount = parseFloat(
                    totalAmountElement.textContent.replace('₱', '').replace(',', '')
                );
                const accountNumber = accountNumElement.textContent;
                
                // Collect bill IDs
                const billIds = [];
                if (currentAccountData.currentBill && !currentAccountData.currentBill.isPaid) {
                    billIds.push(currentAccountData.currentBill.billId);
                }
                
                if (currentAccountData.overdueBill) {
                    currentAccountData.overdueBill.forEach(bill => {
                        if (!bill.isPaid) {
                            billIds.push(bill.billId);
                        }
                    });
                }
                
                showLoading();
                try {
                    const paymentData = await processPayment(totalAmount, accountNumber, billIds);
                    renderPaymentConfirmation(paymentData);
                    accountDetails.classList.add('hidden');
                    paymentConfirmation.classList.remove('hidden');
                    paymentConfirmation.scrollIntoView({ behavior: 'smooth' });
                } catch (error) {
                    showError('Payment failed: ' + error.message);
                } finally {
                    hideLoading();
                }
            });

            anotherPaymentBtn.addEventListener('click', function () {
                paymentConfirmation.classList.add('hidden');
                accountInputCard.classList.remove('hidden');
                accountNumberInput.value = '';
                accountNumberInput.focus();
            });

            newPaymentBtn.addEventListener('click', function () {
                alert('Receipt downloaded! Transaction ID: ' + transactionIdElement.textContent);
            });
        });
    </script>
			</body>
		</html>
	}
}

/********************************************************************/
/********************************************************************/
/********************************************************************/

templ ConsumerPage() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Energy Dashboard - GreenPower Inc.</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
			<script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
			<style>
        .stat-card {
            transition: all 0.3s ease;
            border-left: 4px solid;
        }
        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .filter-btn {
            transition: all 0.2s ease;
        }
        .filter-btn:hover {
            background-color: #bbf7d0;
        }
        .filter-btn.active {
            background-color: #22c55e;
            color: white;
        }
        .chart-container {
            background: linear-gradient(to bottom, #f0fdf4, #ffffff);
        }
    </style>
		</head>
		<body class="bg-primary-50 min-h-screen">
			<!-- Navigation -->
			<nav class="bg-primary-900 text-white">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between h-16">
						<div class="flex items-center">
							<div class="flex-shrink-0 flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2 text-primary-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
								</svg>
								<span class="text-xl font-bold">BATELEC I</span>
							</div>
						</div>
						<div class="hidden md:flex items-center">
							<div class="ml-4 flex items-center md:ml-6">
								<button class="p-1 rounded-full text-primary-200 hover:text-white focus:outline-none">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
									</svg>
								</button>
								<div class="ml-3 relative">
									<div>
										<button class="max-w-xs flex items-center text-sm rounded-full focus:outline-none">
											<img class="h-8 w-8 rounded-full" src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt=""/>
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</nav>
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
					<div>
						<h1 class="text-3xl font-bold text-gray-900">Energy Dashboard</h1>
					</div>
					<div class="mt-4 md:mt-0">
						<div class="relative">
							<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
								</svg>
							</div>
							<select class="bg-white border border-gray-300 rounded-lg py-2 pl-10 pr-4 text-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent">
								<option>July 2023</option>
								<option>June 2023</option>
								<option>May 2023</option>
								<option>April 2023</option>
							</select>
						</div>
					</div>
				</div>
				<!-- Account Details -->
				<div class="bg-white rounded-xl shadow-sm p-6 mb-8">
					<h2 class="text-xl font-semibold text-gray-900 mb-4">Account Details</h2>
					<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
						<div class="p-4 border border-gray-200 rounded-lg">
							<p class="text-sm text-gray-500">Account Number</p>
							<p class="font-medium text-gray-900">AC-7890-4567-1234</p>
						</div>
						<div class="p-4 border border-gray-200 rounded-lg">
							<p class="text-sm text-gray-500">Account Name</p>
							<p class="font-medium text-gray-900">John Doe</p>
						</div>
						<div class="p-4 border border-gray-200 rounded-lg">
							<p class="text-sm text-gray-500">Billing Address</p>
							<p class="font-medium text-gray-900">123 Green St, Eco City, EC 12345</p>
						</div>
					</div>
				</div>
				<!-- Meter Details -->
				<div class="bg-white rounded-xl shadow-sm p-6 mb-8">
					<h2 class="text-xl font-semibold text-gray-900 mb-4">Meter Details</h2>
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Meter Number</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">KWH</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Installation Date</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200">
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">M-12345678</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">-</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Jan 15, 2020</td>
									<td class="px-6 py-4 whitespace-nowrap">
										<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Active</span>
									</td>
								</tr>
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">M-87654321</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">-</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Mar 22, 2022</td>
									<td class="px-6 py-4 whitespace-nowrap">
										<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Active</span>
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
				<!-- Stats Cards -->
				<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
					<div class="stat-card bg-white rounded-xl shadow-sm p-6 border-l-4 border-primary-500">
						<div class="flex justify-between items-start">
							<div>
								<p class="text-sm font-medium text-gray-500">Current Bill</p>
								<p class="text-3xl font-bold text-gray-900 mt-1">$142.50</p>
								<p class="text-sm text-gray-600 mt-2">Due: Aug 15, 2023</p>
							</div>
							<div class="bg-primary-100 p-3 rounded-lg">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</div>
						</div>
						<div class="mt-4">
							<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
								<svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-1.5 h-2 w-2 text-green-400" viewBox="0 0 20 20" fill="currentColor">
									<path fill-rule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
								</svg>
								12% less than last month
							</span>
						</div>
					</div>
					<div class="stat-card bg-white rounded-xl shadow-sm p-6 border-l-4 border-primary-500">
						<div class="flex justify-between items-start">
							<div>
								<p class="text-sm font-medium text-gray-500">Total kWh Used</p>
								<p class="text-3xl font-bold text-gray-900 mt-1">632 kWh</p>
								<p class="text-sm text-gray-600 mt-2">Current Billing Period</p>
							</div>
							<div class="bg-primary-100 p-3 rounded-lg">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
								</svg>
							</div>
						</div>
						<div class="mt-4">
							<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
								<svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-1.5 h-2 w-2 text-green-400" viewBox="0 0 20 20" fill="currentColor">
									<path fill-rule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
								</svg>
								8% less than last month
							</span>
						</div>
					</div>
					<div class="stat-card bg-white rounded-xl shadow-sm p-6 border-l-4 border-primary-500">
						<div class="flex justify-between items-start">
							<div>
								<p class="text-sm font-medium text-gray-500">Daily Average</p>
								<p class="text-3xl font-bold text-gray-900 mt-1">20.4 kWh</p>
								<p class="text-sm text-gray-600 mt-2">Current Billing Period</p>
							</div>
							<div class="bg-primary-100 p-3 rounded-lg">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
								</svg>
							</div>
						</div>
						<div class="mt-4">
							<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
								<svg xmlns="http://www.w3.org/2000/svg" class="-ml-0.5 mr-1.5 h-2 w-2 text-green-400" viewBox="0 0 20 20" fill="currentColor">
									<path fill-rule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
								</svg>
								5% less than last month
							</span>
						</div>
					</div>
				</div>
				<!-- Consumption Chart -->
				<div class="bg-white rounded-xl shadow-sm p-6 mb-8">
					<div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
						<h2 class="text-xl font-semibold text-gray-900">Energy Consumption</h2>
						<div class="mt-4 md:mt-0 flex space-x-1">
							<button class="filter-btn px-3 py-1 rounded-md text-sm font-medium bg-primary-500 text-white active">Month</button>
							<button class="filter-btn px-3 py-1 rounded-md text-sm font-medium text-gray-700 hover:bg-primary-100">Quarter</button>
							<button class="filter-btn px-3 py-1 rounded-md text-sm font-medium text-gray-700 hover:bg-primary-100">Year</button>
						</div>
					</div>
					<div class="chart-container p-4 rounded-lg">
						<canvas id="consumptionChart" height="300"></canvas>
					</div>
				</div>
			</div>
			<script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize chart
            const ctx = document.getElementById('consumptionChart').getContext('2d');
            const consumptionChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Jul 1', 'Jul 5', 'Jul 10', 'Jul 15', 'Jul 20', 'Jul 25', 'Jul 30'],
                    datasets: [{
                        label: 'Daily Consumption (kWh)',
                        data: [22.5, 19.8, 21.2, 18.7, 20.3, 19.1, 21.5],
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        borderColor: 'rgb(34, 197, 94)',
                        borderWidth: 3,
                        pointBackgroundColor: 'white',
                        pointBorderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 7,
                        tension: 0.2,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.05)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return value + ' kWh';
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });

            // Filter button interaction
            const filterButtons = document.querySelectorAll('.filter-btn');
            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                });
            });
        });
    </script>
		</body>
	</html>
}
